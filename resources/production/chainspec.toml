[protocol]
# Protocol version.
version = '2.0.0'
# Whether we need to clear latest blocks back to the switch block just before the activation point or not.
hard_reset = true
# This protocol version becomes active at this point.
#
# If it is a timestamp string, it represents the timestamp for the genesis block.  This is the beginning of era 0.  By
# this time, a sufficient majority (> 50% + F/2 — see finality_threshold_fraction below) of validator nodes must be up
# and running to start the blockchain.  This timestamp is also used in seeding the pseudo-random number generator used
# in contract-runtime for computing genesis post-state hash.
#
# If it is an integer, it represents an era ID, meaning the protocol version becomes active at the start of this era.
activation_point = 11000

[network]
# Human readable name for convenience; the genesis_hash is the true identifier.  The name influences the genesis hash by
# contributing to the seeding of the pseudo-random number generator used in contract-runtime for computing genesis
# post-state hash.
name = 'casper'
# The maximum size of an acceptable networking message in bytes.  Any message larger than this will
# be rejected at the networking level.
maximum_net_message_size = 25_165_824

[core]
# Era duration.
era_duration = '120 minutes'
# Minimum number of blocks per era.  An era will take longer than `era_duration` if that is necessary to reach the
# minimum height.
minimum_era_height = 20
# Minimum difference between a block's and its child's timestamp.
minimum_block_time = '16384 ms'
# Number of slots available in validator auction.
validator_slots = 100
# A number between 0 and 1 representing the fault tolerance threshold as a fraction, used by the internal finalizer.
# It is the fraction of validators that would need to equivocate to make two honest nodes see two conflicting blocks as
# finalized: A higher value F makes it safer to rely on finalized blocks.  It also makes it more difficult to finalize
# blocks, however, and requires strictly more than (F + 1)/2 validators to be working correctly.
finality_threshold_fraction = [1, 3]
# Protocol version from which nodes are required to hold strict finality signatures.
start_protocol_version_with_strict_finality_signatures_required = '1.5.0'
# Which finality is required for legacy blocks. Options are 'Strict', 'Weak' and 'Any'.
# Used to determine finality sufficiency for new joiners syncing blocks created
# in a protocol version before
# `start_protocol_version_with_strict_finality_signatures_required`.
legacy_required_finality = 'Strict'

# If true, the protocol upgrade will migrate ALL userland accounts to addressable entity.
# If false, userland accounts will instead be left as is and will be lazily migrated
#    on a per-account basis if / when that account is used during transaction execution.
migrate_legacy_accounts = true

# If true, the protocol upgrade will migrate ALL userland contracts to addressable entity.
# If false, userland contracts will instead be left as is and will be lazily migrated
#    on a per-contract basis if / when that contract is used during transaction execution.
migrate_legacy_contracts = true

# Number of eras before an auction actually defines the set of validators.  If you bond with a sufficient bid in era N,
# you will be a validator in era N + auction_delay + 1.
auction_delay = 1
# The period after genesis during which a genesis validator's bid is locked.
locked_funds_period = '0 days'
# The period in which genesis validator's bid is released over time after it's unlocked.
vesting_schedule_period = '0 weeks'
# Default number of eras that need to pass to be able to withdraw unbonded funds.
unbonding_delay = 7
# Round seigniorage rate represented as a fraction of the total supply.
#
# Annual issuance: 8%
# Minimum block time: 2^14 milliseconds
# Ticks per year: 31536000000
#
# (1+0.08)^((2^14)/31536000000)-1 is expressed as a fractional number below
# Python:
# from fractions import Fraction
# Fraction((1 + 0.08)**((2**14)/31536000000) - 1).limit_denominator(1000000000)
round_seigniorage_rate = [7, 175070816]
# Maximum number of associated keys for a single account.
max_associated_keys = 100
# Maximum height of contract runtime call stack.
max_runtime_call_stack_height = 12
# Minimum allowed delegation amount in motes
minimum_delegation_amount = 500_000_000_000
# Global state prune batch size (0 = this feature is off)
prune_batch_size = 0
# Enables strict arguments checking when calling a contract; i.e. that all non-optional args are provided and of the correct `CLType`.
strict_argument_checking = false
# Number of simultaneous peer requests.
simultaneous_peer_requests = 5
# The consensus protocol to use. Options are "Zug" and "Highway".
consensus_protocol = 'Zug'
# The maximum amount of delegators per validator.
max_delegators_per_validator = 1200
# The split in finality signature rewards between block producer and participating signers.
finders_fee = [1, 5]
# The proportion of baseline rewards going to reward finality signatures specifically.
finality_signature_proportion = [1, 2]
# Lookback interval indicating which past block we are looking at to reward.
signature_rewards_max_delay = 3
# Allows peer to peer transfers between users.
#
# Setting this to false makes sense only for private chains.
allow_unrestricted_transfers = true
# Enables the auction entry points 'delegate' and 'add_bid'.
#
# Setting this to false makes sense only for private chains which don't need to auction new validator slots. These
# auction entry points will return an error if called when this option is set to false.
allow_auction_bids = true
# If set to false, then consensus doesn't compute rewards and always uses 0.
compute_rewards = true
# Defines how refunds of the unused portion of payment amounts are calculated and handled.
#
# Valid options are:
#   'refund': a ratio of the unspent token is returned to the spender.
#   'burn': a ratio of the unspent token is burned.
#   'no_refund': no refunds are paid out; this is functionally equivalent to refund with 0% ratio.
# This causes excess payment amounts to be sent to either a
# pre-defined purse, or back to the sender.  The refunded amount is calculated as the given ratio of the payment amount
# minus the execution costs.
refund_handling = { type = 'no_refund' }
# Defines how fees are handled.
#
# Valid options are:
#   'no_fee': fees are eliminated.
#   'pay_to_proposer': fees are paid to the block proposer
#   'accumulate': fees are accumulated in a special purse and distributed at the end of each era evenly among all
#                 administrator accounts
#   'burn': fees are burned
fee_handling = { type = 'no_fee' }
# Defines how pricing is handled.
#
# Valid options are:
#   'classic': senders of transaction self-specify how much they pay.
#   'fixed': costs are fixed, per the cost table
#   'reserved': prepaid transaction (currently not supported)
pricing_handling = { type = 'fixed' }
# Does the network allow pre-payment / reservations for future
# execution? Currently not supported.
#
allow_reservations = false
# Defines how gas holds affect available balance calculations.
#
# Valid options are:
#   'accrued': sum of full value of all non-expired holds.
#   'amortized': sum of each hold is amortized over the time remaining until expiry.
#
# For instance, if 12 hours remained on a gas hold with a 24-hour `gas_hold_interval`,
#   with accrued, the full hold amount would be applied
#   with amortized, half the hold amount would be applied
gas_hold_balance_handling = { type = 'accrued' }
# Defines how long gas holds last.
#
# If fee_handling is set to 'no_fee', the system places a balance hold on the payer
# equal to the value the fee would have been. Such balance holds expire after a time
# interval has elapsed. This setting controls how long that interval is. The available
# balance of a purse equals its total balance minus the held amount(s) of non-expired
# holds (see gas_hold_balance_handling setting for details of how that is calculated).
#
# For instance, if gas_hold_interval is 24 hours and 100 gas is used from a purse,
# a hold for 100 is placed on that purse and is considered when calculating total balance
# for 24 hours starting from the block_time when the hold was placed.
gas_hold_interval = '24 hours'
# List of public keys of administrator accounts. Setting this option makes only on private chains which require
# administrator accounts for regulatory reasons.
administrators = []

[highway]
# Highway dynamically chooses its round length, between minimum_block_time and maximum_round_length.
maximum_round_length = '66 seconds'
# The factor by which rewards for a round are multiplied if the greatest summit has ≤50% quorum, i.e. no finality.
# Expressed as a fraction (1/5 by default).
reduced_reward_multiplier = [1, 5]

[transactions]
# The duration after the transaction timestamp that it can be included in a block.
max_ttl = '2 hours'
# Maximum transaction size in bytes.  Size is of the transaction when serialized via ToBytes.
max_transaction_size = 1_048_576
# Maximum number of mint transactions (i.e. transfers) allowed in a block.
block_max_mint_count = 650
# Maximum number of auction (staking) transactions allowed in a block.
block_max_auction_count = 100
# Maximum number of installer/upgrader transactions allowed in a block.
block_max_install_upgrade_count = 2
# Maximum number of other transactions (non-transfer, non-staking, non-installer/upgrader) allowed in a block.
block_max_standard_count = 25
# The maximum number of approvals permitted in a single block.
block_max_approval_count = 2600
# Maximum block size in bytes including transactions contained by the block.  0 means unlimited.
max_block_size = 5_242_880
# The upper limit of total gas of all transactions in a block.
block_gas_limit = 4_000_000_000_000
# The minimum amount in motes for a valid native transfer.
native_transfer_minimum_motes = 2_500_000_000
# The maximum value to which `transaction_acceptor.timestamp_leeway` can be set in the config.toml file.
max_timestamp_leeway = '5 seconds'

[transactions.v1]
# The maximum length in bytes of runtime args per V1 transaction.
max_args_length = 1024

[transactions.deploy]
# The maximum number of Motes allowed to be spent during payment.  0 means unlimited.
max_payment_cost = '0'
# The maximum number of other deploys a deploy can depend on (require to have been executed before it can execute).
max_dependencies = 10
# The limit of length of serialized payment code arguments.
payment_args_max_length = 1024
# The limit of length of serialized session code arguments.
session_args_max_length = 1024

[wasm]
# Amount of free memory (in 64kB pages) each contract can use for stack.
max_memory = 64
# Max stack height (native WebAssembly stack limiter).
max_stack_height = 500

[wasm.storage_costs]
# Gas charged per byte stored in the global state.
gas_per_byte = 1_117_587

[wasm.opcode_costs]
# Bit operations multiplier.
bit = 300
# Arithmetic add operations multiplier.
add = 210
# Mul operations multiplier.
mul = 240
# Div operations multiplier.
div = 320
# Memory load operation multiplier.
load = 2_500
# Memory store operation multiplier.
store = 4_700
# Const store operation multiplier.
const = 110
# Local operations multiplier.
local = 390
# Global operations multiplier.
global = 390
# Integer operations multiplier.
integer_comparison = 250
# Conversion operations multiplier.
conversion = 420
# Unreachable operation multiplier.
unreachable = 270
# Nop operation multiplier.
nop = 200
# Get current memory operation multiplier.
current_memory = 290
# Grow memory cost, per page (64kb).
grow_memory = 240_000

# Control flow operations multiplier.
[wasm.opcode_costs.control_flow]
block = 440
loop = 440
if = 440
else = 440
end = 440
br = 35_000
br_if = 35_000
return = 440
select = 440
call = 68_000
call_indirect = 68_000
drop = 440

[wasm.opcode_costs.control_flow.br_table]
# Fixed cost per `br_table` opcode
cost = 35_000
# Size of target labels in the `br_table` opcode will be multiplied by `size_multiplier`
size_multiplier = 100

# Host function declarations are located in smart_contracts/contract/src/ext_ffi.rs
[wasm.host_function_costs]
add = { cost = 5_800, arguments = [0, 0, 0, 0] }
add_associated_key = { cost = 1_200_000, arguments = [0, 0, 0] }
add_contract_version = { cost = 200, arguments = [0, 0, 0, 0, 120_000, 0, 0, 0, 30_000, 0, 0] }
blake2b = { cost = 1_200_000, arguments = [0, 120_000, 0, 0] }
call_contract = { cost = 300_000_000, arguments = [0, 0, 0, 120_000, 0, 120_000, 0] }
call_versioned_contract = { cost = 300_000_000, arguments = [0, 0, 0, 0, 0, 120_000, 0, 120_000, 0] }
create_contract_package_at_hash = { cost = 200, arguments = [0, 0] }
create_contract_user_group = { cost = 200, arguments = [0, 0, 0, 0, 0, 0, 0, 0] }
create_purse = { cost = 2_500_000_000, arguments = [0, 0] }
disable_contract_version = { cost = 200, arguments = [0, 0, 0, 0] }
get_balance = { cost = 3_000_000, arguments = [0, 0, 0] }
get_blocktime = { cost = 330, arguments = [0] }
get_caller = { cost = 380, arguments = [0] }
get_key = { cost = 2_000, arguments = [0, 440, 0, 0, 0] }
get_main_purse = { cost = 1_300, arguments = [0] }
get_named_arg = { cost = 200, arguments = [0, 120_000, 0, 120_000] }
get_named_arg_size = { cost = 200, arguments = [0, 0, 0] }
get_phase = { cost = 710, arguments = [0] }
get_system_contract = { cost = 1_100, arguments = [0, 0, 0] }
has_key = { cost = 1_500, arguments = [0, 840] }
is_valid_uref = { cost = 760, arguments = [0, 0] }
load_named_keys = { cost = 42_000, arguments = [0, 0] }
new_uref = { cost = 17_000, arguments = [0, 0, 590] }
random_bytes = { cost = 200, arguments = [0, 0] }
print = { cost = 20_000, arguments = [0, 4_600] }
provision_contract_user_group_uref = { cost = 200, arguments = [0, 0, 0, 0, 0] }
put_key = { cost = 100_000_000, arguments = [0, 120_000, 0, 120_000] }
read_host_buffer = { cost = 3_500, arguments = [0, 310, 0] }
read_value = { cost = 60_000, arguments = [0, 120_000, 0] }
read_value_local = { cost = 5_500, arguments = [0, 590, 0] }
remove_associated_key = { cost = 4_200, arguments = [0, 0] }
remove_contract_user_group = { cost = 200, arguments = [0, 0, 0, 0] }
remove_contract_user_group_urefs = { cost = 200, arguments = [0, 0, 0, 0, 0, 120_000] }
remove_key = { cost = 61_000, arguments = [0, 3_200] }
ret = { cost = 23_000, arguments = [0, 420_000] }
revert = { cost = 500, arguments = [0] }
set_action_threshold = { cost = 74_000, arguments = [0, 0] }
transfer_from_purse_to_account = { cost = 2_500_000_000, arguments = [0, 0, 0, 0, 0, 0, 0, 0, 0] }
transfer_from_purse_to_purse = { cost = 82_000_000, arguments = [0, 0, 0, 0, 0, 0, 0, 0] }
transfer_to_account = { cost = 2_500_000_000, arguments = [0, 0, 0, 0, 0, 0, 0] }
update_associated_key = { cost = 4_200, arguments = [0, 0, 0] }
write = { cost = 14_000, arguments = [0, 0, 0, 980] }
write_local = { cost = 9_500, arguments = [0, 1_800, 0, 520] }
enable_contract_version = { cost = 200, arguments = [0, 0, 0, 0] }
manage_message_topic = { cost = 200, arguments = [0, 30_000, 0, 0] }
emit_message = { cost = 200, arguments = [0, 30_000, 0, 120_000] }
cost_increase_per_message = 50

[wasm.messages_limits]
max_topic_name_size = 256
max_topics_per_contract = 128
max_message_size = 1_024

[system_costs]
install_upgrade_gas_limit = 3_500_000_000_000
standard_transaction_gas_limit = 500_000_000_000

[system_costs.auction_costs]
get_era_validators = 10_000
read_seigniorage_recipients = 10_000
add_bid = 2_500_000_000
withdraw_bid = 2_500_000_000
delegate = 2_500_000_000
undelegate = 2_500_000_000
run_auction = 10_000
slash = 10_000
distribute = 10_000
withdraw_delegator_reward = 10_000
withdraw_validator_reward = 10_000
read_era_id = 10_000
activate_bid = 10_000
redelegate = 2_500_000_000
change_bid_public_key = 5_000_000_000

[system_costs.mint_costs]
mint = 2_500_000_000
reduce_total_supply = 10_000
create = 2_500_000_000
balance = 10_000
transfer = 100_000_000
read_base_round_reward = 10_000
mint_into_existing_purse = 2_500_000_000

[system_costs.handle_payment_costs]
get_payment_purse = 10_000
set_refund_purse = 10_000
get_refund_purse = 10_000
finalize_payment = 10_000

[system_costs.standard_payment_costs]
pay = 10_000


[vacancy]
# The cost of a transaction is based on a multiplier. This allows for economic disincentives for misuse of the network.
#
# The network starts with a current_gas_price of min_gas_price.
#
# Each block has multiple limits (bytes, transactions, transfers, gas, etc.)
# The utilization for a block is determined by the highest percentage utilization of each these limits.
#
# Ex: transfers limit is 650 and transactions limit is 20 (assume other limits are not a factor here)
#     19 transactons -> 19/20 or 95%
#     600 transfers -> 600/650 or 92.3%
#     resulting block utilization is 95
#
# The utilization for an era is the average of all block utilizations. At the switch block, the dynamic gas_price is
# adjusted with the following:
#
# If utilization was below the lower_threshold, current_gas_price is decremented by one if higher than min_gas_price.
# If utilization falls between the thresholds, current_gas_price is not changed.
# If utilization was above the upper_threshold, current_gas_price is incremented by one if lower than max_gas_price.
#
# The cost charged for the transaction is simply the gas_used * current_gas_price.
upper_threshold = 90
lower_threshold = 50
max_gas_price = 3
min_gas_price = 1
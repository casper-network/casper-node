# ================================
# Configuration options for a node
# ================================
[node]

# If set, use this hash as a trust anchor when joining an existing network.
#trusted_hash = 'HEX-FORMATTED BLOCK HASH'

# Whether to synchronize all data back to genesis, or just [deploys.max_ttl] (chainspec setting) worth of data.
sync_to_genesis = true

# Idle time after which the syncing process is considered stalled.
idle_tolerance = '20min'

# When the syncing process is considered stalled, it'll be retried up to `max_attempts` times.
max_attempts = 3

# Default delay for the control events that have no dedicated delay requirements.
control_logic_default_delay = '1sec'

# Flag which forces the node to resync all of the blocks.
force_resync = false


# =================================
# Configuration options for logging
# =================================
[logging]

# Output format.  Possible values are 'text' or 'json'.
format = 'text'

# Colored output.  Has no effect if format = 'json'.
color = false

# Abbreviate module names in text output.  Has no effect if format = 'json'.
abbreviate_modules = false


# ===================================
# Configuration options for consensus
# ===================================
[consensus]

# Path (absolute, or relative to this config.toml) to validator's secret key file used to sign
# consensus messages.
secret_key_path = 'secret_key.pem'

# The maximum number of blocks by which execution is allowed to lag behind finalization.
# If it is more than that, consensus will pause, and resume once the executor has caught up.
max_execution_delay = 3


# =======================================
# Configuration options for Zug consensus
# =======================================
[consensus.zug]

# Request the latest protocol state from a random peer periodically, with this interval.
# '0sec' means it is disabled and we never request the protocol state from a peer.
sync_state_interval = '50ms'

# Log inactive or faulty validators periodically, with this interval.
# '0sec' means it is disabled and we never print the log message.
log_participation_interval = '1min'

# The minimal proposal timeout. Validators wait this long for a proposal to receive a quorum of
# echo messages, before they vote to make the round skippable and move on to the next proposer.
proposal_timeout = '10sec'

# The additional proposal delay that is still considered fast enough, in percent. This should
# take into account variables like empty vs. full blocks, network traffic etc.
# E.g. if proposing a full block while under heavy load takes 50% longer than an empty one
# while idle this should be at least 50, meaning that the timeout is 50% longer than
# necessary for a quorum of recent proposals, approximately.
proposal_grace_period = 200

# The average number of rounds after which the proposal timeout adapts by a factor of 2.
# Note: It goes up faster than it goes down: it takes fewer rounds to double than to halve.
proposal_timeout_inertia = 10

# The maximum difference between validators' clocks we expect. Incoming proposals whose timestamp
# lies in the future by more than that are rejected.
clock_tolerance = '1sec'


# ===========================================
# Configuration options for Highway consensus
# ===========================================
[consensus.highway]

# The duration for which incoming vertices with missing dependencies should be kept in a queue.
pending_vertex_timeout = '1min'

# Request the latest protocol state from a random peer periodically, with this interval.
# '0sec' means it is disabled and we never request the protocol state from a peer.
request_state_interval = '20sec'

# Log inactive or faulty validators periodically, with this interval.
# '0sec' means it is disabled and we never print the log message.
log_participation_interval = '15sec'

# Log the synchronizer state periodically, with this interval.
# '0sec' means it is disabled and we never print the log message.
log_synchronizer_interval = '5sec'

# Log the size of every incoming and outgoing serialized unit.
log_unit_sizes = false

# The maximum number of peers we request the same vertex from in parallel.
max_requests_for_vertex = 5

# The maximum number of dependencies we request per validator in a batch.
# Limits requests per validator in panorama - in order to get a total number of
# requests, multiply by # of validators.
max_request_batch_size = 20

[consensus.highway.round_success_meter]
# The number of most recent rounds we will be keeping track of.
num_rounds_to_consider = 40

# The number of successful rounds that triggers us to slow down: With this many or fewer
# successes per `num_rounds_to_consider`, we increase our round length.
num_rounds_slowdown = 10

# The number of successful rounds that triggers us to speed up: With this many or more successes
# per `num_rounds_to_consider`, we decrease our round length.
num_rounds_speedup = 32

# We will try to accelerate (decrease our round length) every `acceleration_parameter` rounds if
# we have few enough failures.
acceleration_parameter = 40

# The FTT, as a percentage (i.e. `acceleration_ftt = [1, 100]` means 1% of the validators' total weight), which
# we will use for looking for a summit in order to determine a proposal's finality.
# The required quorum in a summit we will look for to check if a round was successful is
# determined by this FTT.
acceleration_ftt = [1, 100]


# ====================================
# Configuration options for networking
# ====================================
[network]

# The public address of the node.
#
# It must be publicly available in order to allow peers to connect to this node.
# If the port is set to 0, the actual bound port will be substituted.
public_address = '127.0.0.1:0'

# Address to bind to for listening.
# If port is set to 0, a random port will be used.
bind_address = '0.0.0.0:34553'

# Addresses to connect to in order to join the network.
#
# If not set, this node will not be able to attempt to connect to the network.  Instead it will
# depend upon peers connecting to it.  This is normally only useful for the first node of the
# network.
#
# Multiple addresses can be given and the node will attempt to connect to each, requiring at least
# one connection.
known_addresses = ['127.0.0.1:34553']

# Minimum number of fully-connected peers to consider network component initialized.
min_peers_for_initialization = 3

# The interval between each fresh round of gossiping the node's public address.
gossip_interval = '30sec'

# Initial delay for starting address gossipping after the network starts. This should be slightly
# more than the expected time required for initial connections to complete.
initial_gossip_delay = '5sec'

# How long a connection is allowed to be stuck as pending before it is abandoned.
max_addr_pending_time = '1min'

# Maximum time allowed for a connection handshake between two nodes to be completed. Connections
# exceeding this threshold are considered unlikely to be healthy or even malicious and thus
# terminated.
handshake_timeout = '20sec'

# Maximum number of incoming connections per unique peer allowed. If the limit is hit, additional
# connections will be rejected. A value of `0` means unlimited.
max_incoming_peer_connections = 3

# The maximum total of upstream bandwidth in bytes per second allocated to non-validating peers.
# A value of `0` means unlimited.
max_outgoing_byte_rate_non_validators = 0

# The maximum allowed total impact of requests from non-validating peers per second answered.
# A value of `0` means unlimited.
max_incoming_message_rate_non_validators = 0

# Maximum number of requests for data from a single peer that are allowed be buffered. A value of
# `0` means unlimited.
max_in_flight_demands = 50

# Version threshold to enable tarpit for.
#
# When set to a version (the value may be `null` to disable the feature), any peer that reports a
# protocol version equal or below the threshold will be rejected only after holding open the
# connection for a specific (`tarpit_duration`) amount of time.
#
# This option makes most sense to enable on known nodes with addresses where legacy nodes that are
# still in operation are connecting to, as these older versions will only attempt to reconnect to
# other nodes once they have exhausted their set of known nodes.
tarpit_version_threshold = '1.2.1'

# How long to hold connections to trapped legacy nodes.
tarpit_duration = '10min'

# The probability [0.0, 1.0] of this node trapping a legacy node.
#
# Since older nodes will only reconnect if all their options are exhausted, it is sufficient for a
# single known node to hold open a connection to prevent the node from reconnecting. This should be
# set to `1/n` or higher, with `n` being the number of known nodes expected in the configuration of
# legacy nodes running this software.
tarpit_chance = 0.2

# How long peers remain blocked after they get blocklisted.
blocklist_retain_duration = '1min'

# Identity of a node
#
# When this section is not specified, an identity will be generated when the node process starts with a self-signed certifcate.
# This option makes sense for some private chains where for security reasons joining new nodes is restricted.
# [network.identity]
# tls_certificate = "local_node_cert.pem"
# secret_key = "local_node.pem"
# ca_certificate = "ca_cert.pem"

# Weights for impact estimation of incoming messages, used in combination with
# `max_incoming_message_rate_non_validators`.
#
# Any weight set to 0 means that the category of traffic is exempt from throttling.
[network.estimator_weights]
consensus = 0
gossip = 0
finality_signatures = 0
deploy_requests = 1
deploy_responses = 1
block_requests = 1
block_responses = 0
trie_requests = 1
trie_responses = 0


# ==================================================
# Configuration options for the JSON-RPC HTTP server
# ==================================================
[rpc_server]

# Flag which enables the JSON-RPC HTTP server.
enable_server = true

# Listening address for JSON-RPC HTTP server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the JSON-RPC HTTP server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:7777'

# The global max rate of requests (per second) before they are limited.
# Request will be delayed to the next 1 second bucket once limited.
qps_limit = 100

# Maximum number of bytes to accept in a single request body.
max_body_bytes = 2_621_440


# ========================================================================
# Configuration options for the speculative execution JSON-RPC HTTP server
# ========================================================================
[speculative_exec_server]

# Flag which enables the speculative execution JSON-RPC HTTP server.
enable_server = false

# Listening address for speculative execution JSON-RPC HTTP server.  If the port
# is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.
# If binding fails, the speculative execution JSON-RPC HTTP server will not run,
# but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:7778'

# The global max rate of requests (per second) before they are limited.
# Request will be delayed to the next 1 second bucket once limited.
qps_limit = 1

# Maximum number of bytes to accept in a single request body.
max_body_bytes = 2_621_440


# ==============================================
# Configuration options for the REST HTTP server
# ==============================================
[rest_server]

# Flag which enables the REST HTTP server.
enable_server = true

# Listening address for REST HTTP server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the REST HTTP server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:8888'

# The global max rate of requests (per second) before they are limited.
# Request will be delayed to the next 1 second bucket once limited.
qps_limit = 100


# ==========================================================
# Configuration options for the SSE HTTP event stream server
# ==========================================================
[event_stream_server]

# Flag which enables the SSE HTTP event stream server.
enable_server = true

# Listening address for SSE HTTP event stream server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the SSE HTTP event stream server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:9999'

# The number of event stream events to buffer.
event_stream_buffer_length = 5000

# The maximum number of subscribers across all event streams the server will permit at any one time.
max_concurrent_subscribers = 100


# ===============================================
# Configuration options for the storage component
# ===============================================
[storage]

# Path (absolute, or relative to this config.toml) to the folder where any files created
# or read by the storage component will exist. A subfolder named with the network name will be
# automatically created and used for the storage component files.
#
# If the folder doesn't exist, it and any required parents will be created.
#
# If unset, the path must be supplied as an argument via the CLI.
path = '../node-storage'

# Maximum size of the database to use for the block store.
#
# The size should be a multiple of the OS page size.
#
# 483_183_820_800 == 18 GiB.
max_block_store_size = 19_327_352_832

# Maximum size of the database to use for the deploy store.
#
# The size should be a multiple of the OS page size.
#
# 322_122_547_200 == 12 GiB.
max_deploy_store_size = 12_884_901_888

# Maximum size of the database to use for the deploy metadata.
#
# The size should be a multiple of the OS page size.
#
# 322_122_547_200 == 12 GiB.
max_deploy_metadata_store_size = 12_884_901_888

# Maximum size of the database to use for the state snapshots.
#
# The size should be a multiple of the OS page size.
#
# 10_737_418_240 == 10 GiB.
max_state_store_size = 10_737_418_240

# Memory deduplication.
#
# If enabled, nodes will attempt to share loaded objects if possible.
enable_mem_deduplication = true

# Memory duplication garbage collection.
#
# Sets the frequency how often the memory pool cache is swept for free references.
# For example, setting this value to 5 means that every 5th time something is put in the pool the cache is swept.
mem_pool_prune_interval = 4096


# ===================================
# Configuration options for gossiping
# ===================================
[gossip]

# Target number of peers to infect with a given piece of data.
infection_target = 3

# The saturation limit as a percentage, with a maximum value of 99.  Used as a termination
# condition.
#
# Example: assume the `infection_target` is 3, the `saturation_limit_percent` is 80, and we don't
# manage to newly infect 3 peers.  We will stop gossiping once we know of more than 15 holders
# excluding us since 80% saturation would imply 3 new infections in 15 peers.
saturation_limit_percent = 80

# The maximum duration for which to keep finished entries.
#
# The longer they are retained, the lower the likelihood of re-gossiping a piece of data.  However,
# the longer they are retained, the larger the list of finished entries can grow.
finished_entry_duration = '1min'

# The timeout duration for a single gossip request, i.e. for a single gossip message
# sent from this node, it will be considered timed out if the expected response from that peer is
# not received within this specified duration.
gossip_request_timeout = '10sec'

# The timeout duration for retrieving the remaining part(s) of newly-discovered data
# from a peer which gossiped information about that data to this node.
get_remainder_timeout = '5sec'

# The timeout duration for a newly-received, gossiped item to be validated and stored by another
# component before the gossiper abandons waiting to gossip the item onwards.
validate_and_store_timeout = '1min'


# ===============================================
# Configuration options for the block accumulator
# ===============================================
[block_accumulator]

# Block height difference threshold for starting to execute the blocks.
attempt_execution_threshold = 3

# Accepted time interval for inactivity in block accumulator.
dead_air_interval = '3min'

# Time after which the block acceptors are considered old and can be purged.
purge_interval = '5min'


# ================================================
# Configuration options for the block synchronizer
# ================================================
[block_synchronizer]

# Maximum number of fetch-trie tasks to run in parallel during block synchronization.
max_parallel_trie_fetches = 5000

# Time interval for the node to ask for refreshed peers.
peer_refresh_interval = '90sec'

# Time interval for the node to check what the block synchronizer needs to acquire next.
need_next_interval = '1sec'

# Time interval for recurring disconnection of dishonest peers.
disconnect_dishonest_peers_interval = '10sec'


# ==================================
# Configuration options for fetchers
# ==================================
[fetcher]

# The timeout duration for a single fetcher request, i.e. for a single fetcher message
# sent from this node to another node, it will be considered timed out if the expected response from that peer is
# not received within this specified duration.
get_from_peer_timeout = '10sec'


# ========================================================
# Configuration options for the contract runtime component
# ========================================================
[contract_runtime]

# Optional maximum size of the database to use for the global state store.
#
# If unset, defaults to 805,306,368,000 == 750 GiB.
#
# The size should be a multiple of the OS page size.
max_global_state_size = 32_212_254_720

# Optional depth limit to use for global state queries.
#
# If unset, defaults to 5.
max_query_depth = 5

# Enable manual synchronizing to disk.
#
# If unset, defaults to true.
enable_manual_sync = true


# ===========================================
# Configuration options for the deploy buffer
# ===========================================
[deploy_buffer]

# The interval of checking for expired deploys.
expiry_check_interval = '1min'


# ==============================================
# Configuration options for the diagnostics port
# ==============================================
[diagnostics_port]

# If set, the diagnostics port will be available on a UNIX socket.
enabled = true

# Filename for the UNIX domain socket the diagnostics port listens on.
socket_path = "debug.socket"

# The umask to set before creating the socket. A restrictive mask like `0o077` will cause the
# socket to be only accessible by the user the node runs as. A more relaxed variant is `0o007`,
# which allows for group access as well.
socket_umask = 0o077


# =============================================
# Configuration options for the upgrade watcher
# =============================================
[upgrade_watcher]

# How often to scan file system for available upgrades.
upgrade_check_interval = '30sec'

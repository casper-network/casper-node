{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetStatusResult",
  "description": "Result for \"info_get_status\" RPC response.",
  "type": "object",
  "required": [
    "api_version",
    "build_version",
    "chainspec_name",
    "node_state",
    "peers",
    "starting_state_root_hash",
    "uptime"
  ],
  "properties": {
    "api_version": {
      "description": "The RPC API version.",
      "type": "string"
    },
    "chainspec_name": {
      "description": "The chainspec name.",
      "type": "string"
    },
    "starting_state_root_hash": {
      "description": "The state root hash used at the start of the current session.",
      "deprecated": true,
      "allOf": [
        {
          "$ref": "#/definitions/Digest"
        }
      ]
    },
    "peers": {
      "description": "The node ID and network address of each connected peer.",
      "allOf": [
        {
          "$ref": "#/definitions/PeersMap"
        }
      ]
    },
    "last_added_block_info": {
      "description": "The minimal info of the last block from the linear chain.",
      "anyOf": [
        {
          "$ref": "#/definitions/MinimalBlockInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "our_public_signing_key": {
      "description": "Our public signing key.",
      "anyOf": [
        {
          "$ref": "#/definitions/PublicKey"
        },
        {
          "type": "null"
        }
      ]
    },
    "round_length": {
      "description": "The next round length if this node is a validator.",
      "anyOf": [
        {
          "$ref": "#/definitions/TimeDiff"
        },
        {
          "type": "null"
        }
      ]
    },
    "next_upgrade": {
      "description": "Information about the next scheduled upgrade.",
      "anyOf": [
        {
          "$ref": "#/definitions/NextUpgrade"
        },
        {
          "type": "null"
        }
      ]
    },
    "build_version": {
      "description": "The compiled node version.",
      "type": "string"
    },
    "uptime": {
      "description": "Time that passed since the node has started.",
      "allOf": [
        {
          "$ref": "#/definitions/TimeDiff"
        }
      ]
    },
    "node_state": {
      "description": "The current state of node.",
      "allOf": [
        {
          "$ref": "#/definitions/NodeState"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Digest": {
      "description": "Hex-encoded hash digest.",
      "type": "string"
    },
    "PeersMap": {
      "description": "Map of peer IDs to network addresses.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PeerEntry"
      }
    },
    "PeerEntry": {
      "description": "Node peer entry.",
      "type": "object",
      "required": [
        "address",
        "node_id"
      ],
      "properties": {
        "node_id": {
          "description": "Node id.",
          "type": "string"
        },
        "address": {
          "description": "Node address.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "MinimalBlockInfo": {
      "description": "Minimal info of a `Block`.",
      "type": "object",
      "required": [
        "creator",
        "era_id",
        "hash",
        "height",
        "state_root_hash",
        "timestamp"
      ],
      "properties": {
        "hash": {
          "$ref": "#/definitions/BlockHash"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        },
        "era_id": {
          "$ref": "#/definitions/EraId"
        },
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "state_root_hash": {
          "$ref": "#/definitions/Digest"
        },
        "creator": {
          "$ref": "#/definitions/PublicKey"
        }
      },
      "additionalProperties": false
    },
    "BlockHash": {
      "description": "A cryptographic hash identifying a [`Block`](struct.Block.html).",
      "allOf": [
        {
          "$ref": "#/definitions/Digest"
        }
      ]
    },
    "Timestamp": {
      "description": "Timestamp formatted as per RFC 3339",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "EraId": {
      "description": "Era ID newtype.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "PublicKey": {
      "description": "Hex-encoded cryptographic public key, including the algorithm tag prefix.",
      "type": "string"
    },
    "TimeDiff": {
      "description": "Human-readable duration.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "NextUpgrade": {
      "description": "Information about the next protocol upgrade.",
      "type": "object",
      "required": [
        "activation_point",
        "protocol_version"
      ],
      "properties": {
        "activation_point": {
          "$ref": "#/definitions/ActivationPoint"
        },
        "protocol_version": {
          "type": "string"
        }
      }
    },
    "ActivationPoint": {
      "description": "The first era to which the associated protocol version applies.",
      "anyOf": [
        {
          "$ref": "#/definitions/EraId"
        },
        {
          "$ref": "#/definitions/Timestamp"
        }
      ]
    },
    "NodeState": {
      "description": "The various possible states of operation for the node.",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "participating"
          ]
        },
        {
          "description": "The node is currently in joining mode.",
          "type": "object",
          "required": [
            "joining"
          ],
          "properties": {
            "joining": {
              "$ref": "#/definitions/Progress"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The node is currently in participating mode, but also syncing to genesis in the background.",
          "type": "object",
          "required": [
            "participating_and_syncing_to_genesis"
          ],
          "properties": {
            "participating_and_syncing_to_genesis": {
              "type": "object",
              "required": [
                "sync_progress"
              ],
              "properties": {
                "sync_progress": {
                  "description": "The progress of the chain sync-to-genesis task.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Progress"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Progress": {
      "description": "The progress of the chain-synchronizer task.",
      "anyOf": [
        {
          "description": "The chain-synchronizer is performing the fast-sync task.",
          "allOf": [
            {
              "$ref": "#/definitions/FastSync"
            }
          ]
        },
        {
          "description": "The chain-synchronizer is performing the sync-to-genesis task.",
          "allOf": [
            {
              "$ref": "#/definitions/SyncToGenesis"
            }
          ]
        }
      ]
    },
    "FastSync": {
      "description": "The progress of the fast-sync task, performed by all nodes while in joining mode.\n\nThe fast-sync task generally progresses from each variant to the next linearly.  An exception is that it will cycle repeatedly from `FetchingBlockAndDeploysToExecute` to `ExecutingBlock` (and possibly to `RetryingBlockExecution`) as it iterates forwards one block at a time, fetching then executing.",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "not yet started",
            "starting",
            "finished"
          ]
        },
        {
          "description": "Currently fetching the trusted block header.",
          "type": "object",
          "required": [
            "fetching_trusted_block_header"
          ],
          "properties": {
            "fetching_trusted_block_header": {
              "$ref": "#/definitions/BlockHash"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Currently syncing the trie-store under the given state root hash.",
          "type": "object",
          "required": [
            "fetching_global_state_under_given_block"
          ],
          "properties": {
            "fetching_global_state_under_given_block": {
              "type": "object",
              "required": [
                "block_height",
                "number_of_remaining_tries_to_fetch",
                "reason",
                "state_root_hash"
              ],
              "properties": {
                "block_height": {
                  "description": "The height of the block containing the given state root hash.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "state_root_hash": {
                  "description": "The global state root hash.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Digest"
                    }
                  ]
                },
                "reason": {
                  "description": "The reason for syncing the trie-store.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/FetchingTriesReason"
                    }
                  ]
                },
                "number_of_remaining_tries_to_fetch": {
                  "description": "The number of remaining tries to fetch (this value can rise and fall as the task proceeds).",
                  "type": "integer",
                  "format": "uint",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Currently fetching the block at the given height and its deploys in preparation for executing it.",
          "type": "object",
          "required": [
            "fetching_block_and_deploys_at_given_block_height_before_execution"
          ],
          "properties": {
            "fetching_block_and_deploys_at_given_block_height_before_execution": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Currently executing the block at the given height.",
          "type": "object",
          "required": [
            "executing_block_at_height"
          ],
          "properties": {
            "executing_block_at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Currently retrying the execution of the block at the given height, due to an unexpected mismatch in the previous execution result (due to a mismatch in the deploys' approvals).",
          "type": "object",
          "required": [
            "retrying_block_execution"
          ],
          "properties": {
            "retrying_block_execution": {
              "type": "object",
              "required": [
                "attempt",
                "block_height"
              ],
              "properties": {
                "block_height": {
                  "description": "The height of the block being executed.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "attempt": {
                  "description": "The retry attempt number.",
                  "type": "integer",
                  "format": "uint",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FetchingTriesReason": {
      "description": "The reason for syncing the trie store under a given state root hash.",
      "type": "string",
      "enum": [
        "for fast sync",
        "preparing for emergency upgrade",
        "preparing for upgrade"
      ]
    },
    "SyncToGenesis": {
      "description": "The progress of the sync-to-genesis task, only performed by nodes configured to do this, and performed by them while in participating mode.\n\nThe sync-to-genesis task progresses from each variant to the next linearly.",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "not yet started",
            "starting",
            "finished"
          ]
        },
        {
          "description": "Currently fetching block headers in batches back towards the genesis block.",
          "type": "object",
          "required": [
            "fetching_headers_back_to_genesis"
          ],
          "properties": {
            "fetching_headers_back_to_genesis": {
              "type": "object",
              "required": [
                "lowest_block_height"
              ],
              "properties": {
                "lowest_block_height": {
                  "description": "The current lowest block header retrieved by this fetch-headers-to-genesis task.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Currently syncing all blocks from genesis towards the tip of the chain.\n\nThis is done via many parallel sync-block tasks, with each such ongoing task being represented by an entry in the wrapped `Vec`.  The set is sorted ascending by block height.",
          "type": "object",
          "required": [
            "syncing_forward_from_genesis"
          ],
          "properties": {
            "syncing_forward_from_genesis": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncBlock"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SyncBlock": {
      "description": "Container pairing the given [`SyncBlockFetching`] progress indicator with the height of the relative block.",
      "type": "object",
      "required": [
        "block_height",
        "fetching"
      ],
      "properties": {
        "block_height": {
          "description": "The height of the block being synced.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fetching": {
          "description": "The progress of the sync-block task.",
          "allOf": [
            {
              "$ref": "#/definitions/SyncBlockFetching"
            }
          ]
        }
      }
    },
    "SyncBlockFetching": {
      "description": "The progress of a single sync-block task, many of which are performed in parallel during sync-to-genesis.\n\nThe task progresses from each variant to the next linearly.",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "block and deploys",
            "block signatures"
          ]
        },
        {
          "description": "Currently syncing the trie-store under the state root hash held in the block.",
          "type": "object",
          "required": [
            "global_state_under_given_block"
          ],
          "properties": {
            "global_state_under_given_block": {
              "type": "object",
              "required": [
                "number_of_remaining_tries_to_fetch",
                "state_root_hash"
              ],
              "properties": {
                "state_root_hash": {
                  "description": "The global state root hash.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Digest"
                    }
                  ]
                },
                "number_of_remaining_tries_to_fetch": {
                  "description": "The number of remaining tries to fetch (this value can rise and fall as the task proceeds).",
                  "type": "integer",
                  "format": "uint",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
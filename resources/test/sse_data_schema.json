{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SseData",
  "description": "The \"data\" field of the events sent on the event stream to clients.",
  "oneOf": [
    {
      "description": "The version of this node's API server.  This event will always be the first sent to a new client, and will have no associated event ID provided.",
      "type": "object",
      "required": [
        "ApiVersion"
      ],
      "properties": {
        "ApiVersion": {
          "$ref": "#/definitions/ProtocolVersion"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given block has been added to the linear chain and stored locally.",
      "type": "object",
      "required": [
        "BlockAdded"
      ],
      "properties": {
        "BlockAdded": {
          "type": "object",
          "required": [
            "block",
            "block_hash"
          ],
          "properties": {
            "block_hash": {
              "$ref": "#/definitions/BlockHash"
            },
            "block": {
              "$ref": "#/definitions/Block"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given transaction has been newly-accepted by this node.",
      "type": "object",
      "required": [
        "TransactionAccepted"
      ],
      "properties": {
        "TransactionAccepted": {
          "type": "object",
          "required": [
            "transaction"
          ],
          "properties": {
            "transaction": {
              "description": "a transaction",
              "allOf": [
                {
                  "$ref": "#/definitions/Transaction"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given transaction has been executed, committed and forms part of the given block.",
      "type": "object",
      "required": [
        "TransactionProcessed"
      ],
      "properties": {
        "TransactionProcessed": {
          "type": "object",
          "required": [
            "block_hash",
            "execution_result",
            "initiator_addr",
            "messages",
            "timestamp",
            "transaction_hash",
            "ttl"
          ],
          "properties": {
            "transaction_hash": {
              "$ref": "#/definitions/TransactionHash"
            },
            "initiator_addr": {
              "$ref": "#/definitions/InitiatorAddr"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            },
            "ttl": {
              "$ref": "#/definitions/TimeDiff"
            },
            "block_hash": {
              "$ref": "#/definitions/BlockHash"
            },
            "execution_result": {
              "$ref": "#/definitions/ExecutionResult"
            },
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given transaction has expired.",
      "type": "object",
      "required": [
        "TransactionExpired"
      ],
      "properties": {
        "TransactionExpired": {
          "type": "object",
          "required": [
            "transaction_hash"
          ],
          "properties": {
            "transaction_hash": {
              "$ref": "#/definitions/TransactionHash"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Generic representation of validator's fault in an era.",
      "type": "object",
      "required": [
        "Fault"
      ],
      "properties": {
        "Fault": {
          "type": "object",
          "required": [
            "era_id",
            "public_key",
            "timestamp"
          ],
          "properties": {
            "era_id": {
              "$ref": "#/definitions/EraId"
            },
            "public_key": {
              "$ref": "#/definitions/PublicKey"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "New finality signature received.",
      "type": "object",
      "required": [
        "FinalitySignature"
      ],
      "properties": {
        "FinalitySignature": {
          "$ref": "#/definitions/FinalitySignature"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The execution effects produced by a `StepRequest`.",
      "type": "object",
      "required": [
        "Step"
      ],
      "properties": {
        "Step": {
          "type": "object",
          "required": [
            "era_id",
            "execution_effects"
          ],
          "properties": {
            "era_id": {
              "$ref": "#/definitions/EraId"
            },
            "execution_effects": {
              "$ref": "#/definitions/Effects"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The node is about to shut down.",
      "type": "string",
      "enum": [
        "Shutdown"
      ]
    }
  ],
  "definitions": {
    "ProtocolVersion": {
      "description": "Casper Platform protocol version",
      "type": "string"
    },
    "BlockHash": {
      "description": "Hex-encoded cryptographic hash of a block.",
      "allOf": [
        {
          "$ref": "#/definitions/Digest"
        }
      ]
    },
    "Digest": {
      "description": "Hex-encoded hash digest.",
      "type": "string"
    },
    "Block": {
      "description": "A block after execution.",
      "oneOf": [
        {
          "description": "The legacy, initial version of the block.",
          "type": "object",
          "required": [
            "Version1"
          ],
          "properties": {
            "Version1": {
              "$ref": "#/definitions/BlockV1"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The version 2 of the block.",
          "type": "object",
          "required": [
            "Version2"
          ],
          "properties": {
            "Version2": {
              "$ref": "#/definitions/BlockV2"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BlockV1": {
      "description": "A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 1.",
      "type": "object",
      "required": [
        "body",
        "hash",
        "header"
      ],
      "properties": {
        "hash": {
          "description": "The block hash identifying this block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "header": {
          "description": "The header portion of the block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHeaderV1"
            }
          ]
        },
        "body": {
          "description": "The body portion of the block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockBodyV1"
            }
          ]
        }
      }
    },
    "BlockHeaderV1": {
      "description": "The header portion of a block.",
      "type": "object",
      "required": [
        "accumulated_seed",
        "body_hash",
        "era_id",
        "height",
        "parent_hash",
        "protocol_version",
        "random_bit",
        "state_root_hash",
        "timestamp"
      ],
      "properties": {
        "parent_hash": {
          "description": "The parent block's hash.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "state_root_hash": {
          "description": "The root hash of global state after the deploys in this block have been executed.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "body_hash": {
          "description": "The hash of the block's body.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "random_bit": {
          "description": "A random bit needed for initializing a future era.",
          "type": "boolean"
        },
        "accumulated_seed": {
          "description": "A seed needed for initializing a future era.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "era_end": {
          "description": "The `EraEnd` of a block if it is a switch block.",
          "anyOf": [
            {
              "$ref": "#/definitions/EraEndV1"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "description": "The timestamp from when the block was proposed.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "era_id": {
          "description": "The era ID in which this block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "height": {
          "description": "The height of this block, i.e. the number of ancestors.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "protocol_version": {
          "description": "The protocol version of the network from when this block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/ProtocolVersion"
            }
          ]
        }
      }
    },
    "EraEndV1": {
      "description": "Information related to the end of an era, and validator weights for the following era.",
      "type": "object",
      "required": [
        "era_report",
        "next_era_validator_weights"
      ],
      "properties": {
        "era_report": {
          "description": "Equivocation, reward and validator inactivity information.",
          "allOf": [
            {
              "$ref": "#/definitions/EraReport_for_PublicKey"
            }
          ]
        },
        "next_era_validator_weights": {
          "description": "The validators for the upcoming era and their respective weights.",
          "allOf": [
            {
              "$ref": "#/definitions/Array_of_ValidatorWeight"
            }
          ]
        }
      }
    },
    "EraReport_for_PublicKey": {
      "description": "Equivocation, reward and validator inactivity information.",
      "type": "object",
      "required": [
        "equivocators",
        "inactive_validators",
        "rewards"
      ],
      "properties": {
        "equivocators": {
          "description": "The set of equivocators.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicKey"
          }
        },
        "rewards": {
          "description": "Rewards for finalization of earlier blocks.",
          "allOf": [
            {
              "$ref": "#/definitions/Array_of_EraReward"
            }
          ]
        },
        "inactive_validators": {
          "description": "Validators that haven't produced any unit during the era.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicKey"
          }
        }
      }
    },
    "PublicKey": {
      "description": "Hex-encoded cryptographic public key, including the algorithm tag prefix.",
      "examples": [
        {
          "name": "SystemPublicKey",
          "description": "A pseudo public key, used for example when the system proposes an immediate switch block after a network upgrade rather than a specific validator. Its hex-encoded value is always '00', as is the corresponding pseudo signature's",
          "value": "00"
        },
        {
          "name": "Ed25519PublicKey",
          "description": "An Ed25519 public key. Its hex-encoded value begins '01' and is followed by 64 characters",
          "value": "018a88e3dd7409f195fd52db2d3cba5d72ca6709bf1d94121bf3748801b40f6f5c"
        },
        {
          "name": "Secp256k1PublicKey",
          "description": "A secp256k1 public key. Its hex-encoded value begins '02' and is followed by 66 characters",
          "value": "0203408e9526316fd1f8def480dd45b2cc72ffd732771c9ceb5d92ffa4051e6ee084"
        }
      ],
      "type": "string"
    },
    "Array_of_EraReward": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/EraReward"
      }
    },
    "EraReward": {
      "description": "A validator's public key paired with a measure of the value of its contribution to consensus, as a fraction of the configured maximum block reward.",
      "type": "object",
      "required": [
        "amount",
        "validator"
      ],
      "properties": {
        "validator": {
          "description": "The validator's public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "amount": {
          "description": "The reward amount.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Array_of_ValidatorWeight": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ValidatorWeight"
      }
    },
    "ValidatorWeight": {
      "description": "A validator's public key paired with its weight, i.e. the total number of motes staked by it and its delegators.",
      "type": "object",
      "required": [
        "validator",
        "weight"
      ],
      "properties": {
        "validator": {
          "description": "The validator's public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "weight": {
          "description": "The validator's weight.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        }
      }
    },
    "U512": {
      "description": "Decimal representation of a 512-bit integer.",
      "type": "string"
    },
    "Timestamp": {
      "description": "Timestamp formatted as per RFC 3339",
      "type": "string"
    },
    "EraId": {
      "description": "Era ID newtype.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "BlockBodyV1": {
      "description": "The body portion of a block. Version 1.",
      "type": "object",
      "required": [
        "deploy_hashes",
        "proposer",
        "transfer_hashes"
      ],
      "properties": {
        "proposer": {
          "description": "The public key of the validator which proposed the block.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "deploy_hashes": {
          "description": "The deploy hashes of the non-transfer deploys within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployHash"
          }
        },
        "transfer_hashes": {
          "description": "The deploy hashes of the transfers within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployHash"
          }
        }
      }
    },
    "DeployHash": {
      "description": "Hex-encoded deploy hash.",
      "allOf": [
        {
          "$ref": "#/definitions/Digest"
        }
      ]
    },
    "BlockV2": {
      "description": "A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 2.",
      "type": "object",
      "required": [
        "body",
        "hash",
        "header"
      ],
      "properties": {
        "hash": {
          "description": "The block hash identifying this block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "header": {
          "description": "The header portion of the block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHeaderV2"
            }
          ]
        },
        "body": {
          "description": "The body portion of the block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockBodyV2"
            }
          ]
        }
      }
    },
    "BlockHeaderV2": {
      "description": "The header portion of a block.",
      "type": "object",
      "required": [
        "accumulated_seed",
        "body_hash",
        "era_id",
        "height",
        "parent_hash",
        "protocol_version",
        "random_bit",
        "state_root_hash",
        "timestamp"
      ],
      "properties": {
        "parent_hash": {
          "description": "The parent block's hash.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "state_root_hash": {
          "description": "The root hash of global state after the deploys in this block have been executed.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "body_hash": {
          "description": "The hash of the block's body.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "random_bit": {
          "description": "A random bit needed for initializing a future era.",
          "type": "boolean"
        },
        "accumulated_seed": {
          "description": "A seed needed for initializing a future era.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "era_end": {
          "description": "The `EraEnd` of a block if it is a switch block.",
          "anyOf": [
            {
              "$ref": "#/definitions/EraEndV2"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "description": "The timestamp from when the block was proposed.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "era_id": {
          "description": "The era ID in which this block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "height": {
          "description": "The height of this block, i.e. the number of ancestors.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "protocol_version": {
          "description": "The protocol version of the network from when this block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/ProtocolVersion"
            }
          ]
        }
      }
    },
    "EraEndV2": {
      "description": "Information related to the end of an era, and validator weights for the following era.",
      "type": "object",
      "required": [
        "equivocators",
        "inactive_validators",
        "next_era_validator_weights",
        "rewards"
      ],
      "properties": {
        "equivocators": {
          "description": "The set of equivocators.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicKey"
          }
        },
        "inactive_validators": {
          "description": "Validators that haven't produced any unit during the era.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicKey"
          }
        },
        "next_era_validator_weights": {
          "description": "The validators for the upcoming era and their respective weights.",
          "allOf": [
            {
              "$ref": "#/definitions/Array_of_ValidatorWeight"
            }
          ]
        },
        "rewards": {
          "description": "The rewards distributed to the validators.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/U512"
          }
        }
      }
    },
    "BlockBodyV2": {
      "description": "The body portion of a block. Version 2.",
      "type": "object",
      "required": [
        "install_upgrade",
        "proposer",
        "rewarded_signatures",
        "staking",
        "standard",
        "transfer"
      ],
      "properties": {
        "proposer": {
          "description": "The public key of the validator which proposed the block.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "transfer": {
          "description": "The hashes of the transfer transactions within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionHash"
          }
        },
        "staking": {
          "description": "The hashes of the non-transfer, native transactions within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionHash"
          }
        },
        "install_upgrade": {
          "description": "The hashes of the installer/upgrader transactions within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionHash"
          }
        },
        "standard": {
          "description": "The hashes of all other transactions within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionHash"
          }
        },
        "rewarded_signatures": {
          "description": "List of identifiers for finality signatures for a particular past block.",
          "allOf": [
            {
              "$ref": "#/definitions/RewardedSignatures"
            }
          ]
        }
      }
    },
    "TransactionHash": {
      "description": "A versioned wrapper for a transaction hash or deploy hash.",
      "oneOf": [
        {
          "description": "A deploy hash.",
          "type": "object",
          "required": [
            "Deploy"
          ],
          "properties": {
            "Deploy": {
              "$ref": "#/definitions/DeployHash"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A version 1 transaction hash.",
          "type": "object",
          "required": [
            "Version1"
          ],
          "properties": {
            "Version1": {
              "$ref": "#/definitions/TransactionV1Hash"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransactionV1Hash": {
      "description": "Hex-encoded TransactionV1 hash.",
      "allOf": [
        {
          "$ref": "#/definitions/Digest"
        }
      ]
    },
    "RewardedSignatures": {
      "description": "Describes finality signatures that will be rewarded in a block. Consists of a vector of `SingleBlockRewardedSignatures`, each of which describes signatures for a single ancestor block. The first entry represents the signatures for the parent block, the second for the parent of the parent, and so on.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SingleBlockRewardedSignatures"
      }
    },
    "SingleBlockRewardedSignatures": {
      "description": "List of identifiers for finality signatures for a particular past block.\n\nThat past block height is current_height - signature_rewards_max_delay, the latter being defined in the chainspec.\n\nWe need to wait for a few blocks to pass (`signature_rewards_max_delay`) to store the finality signers because we need a bit of time to get the block finality.",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      }
    },
    "Transaction": {
      "description": "A versioned wrapper for a transaction or deploy.",
      "oneOf": [
        {
          "description": "A deploy.",
          "type": "object",
          "required": [
            "Deploy"
          ],
          "properties": {
            "Deploy": {
              "$ref": "#/definitions/Deploy"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A version 1 transaction.",
          "type": "object",
          "required": [
            "Version1"
          ],
          "properties": {
            "Version1": {
              "$ref": "#/definitions/TransactionV1"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Deploy": {
      "description": "A signed smart contract.",
      "type": "object",
      "required": [
        "approvals",
        "hash",
        "header",
        "payment",
        "session"
      ],
      "properties": {
        "hash": {
          "$ref": "#/definitions/DeployHash"
        },
        "header": {
          "$ref": "#/definitions/DeployHeader"
        },
        "payment": {
          "$ref": "#/definitions/ExecutableDeployItem"
        },
        "session": {
          "$ref": "#/definitions/ExecutableDeployItem"
        },
        "approvals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployApproval"
          },
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },
    "DeployHeader": {
      "description": "The header portion of a [`Deploy`].",
      "type": "object",
      "required": [
        "account",
        "body_hash",
        "chain_name",
        "dependencies",
        "gas_price",
        "timestamp",
        "ttl"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/PublicKey"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        },
        "ttl": {
          "$ref": "#/definitions/TimeDiff"
        },
        "gas_price": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "body_hash": {
          "$ref": "#/definitions/Digest"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployHash"
          }
        },
        "chain_name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TimeDiff": {
      "description": "Human-readable duration.",
      "type": "string"
    },
    "ExecutableDeployItem": {
      "description": "The executable component of a [`Deploy`].",
      "oneOf": [
        {
          "description": "Executable specified as raw bytes that represent Wasm code and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "ModuleBytes"
          ],
          "properties": {
            "ModuleBytes": {
              "type": "object",
              "required": [
                "args",
                "module_bytes"
              ],
              "properties": {
                "module_bytes": {
                  "description": "Hex-encoded raw Wasm bytes.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Bytes"
                    }
                  ]
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored contract referenced by its [`AddressableEntityHash`], entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredContractByHash"
          ],
          "properties": {
            "StoredContractByHash": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "hash"
              ],
              "properties": {
                "hash": {
                  "description": "Hex-encoded contract hash.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AddressableEntityHash"
                    }
                  ]
                },
                "entry_point": {
                  "description": "Name of an entry point.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredContractByName"
          ],
          "properties": {
            "StoredContractByName": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Named key.",
                  "type": "string"
                },
                "entry_point": {
                  "description": "Name of an entry point.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored versioned contract referenced by its [`PackageHash`], entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredVersionedContractByHash"
          ],
          "properties": {
            "StoredVersionedContractByHash": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "hash"
              ],
              "properties": {
                "hash": {
                  "description": "Hex-encoded contract package hash.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PackageHash"
                    }
                  ]
                },
                "version": {
                  "description": "An optional version of the contract to call. It will default to the highest enabled version if no value is specified.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "entry_point": {
                  "description": "Entry point name.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored versioned contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredVersionedContractByName"
          ],
          "properties": {
            "StoredVersionedContractByName": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Named key.",
                  "type": "string"
                },
                "version": {
                  "description": "An optional version of the contract to call. It will default to the highest enabled version if no value is specified.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "entry_point": {
                  "description": "Entry point name.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A native transfer which does not contain or reference a Wasm code.",
          "type": "object",
          "required": [
            "Transfer"
          ],
          "properties": {
            "Transfer": {
              "type": "object",
              "required": [
                "args"
              ],
              "properties": {
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Bytes": {
      "description": "Hex-encoded bytes.",
      "type": "string"
    },
    "RuntimeArgs": {
      "description": "Represents a collection of arguments passed to a smart contract.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NamedArg"
      }
    },
    "NamedArg": {
      "description": "Named arguments to a contract.",
      "type": "array",
      "items": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/CLValue"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "CLValue": {
      "description": "A Casper value, i.e. a value which can be stored and manipulated by smart contracts.\n\nIt holds the underlying data as a type-erased, serialized `Vec<u8>` and also holds the CLType of the underlying data as a separate member.\n\nThe `parsed` field, representing the original value, is a convenience only available when a CLValue is encoded to JSON, and can always be set to null if preferred.",
      "type": "object",
      "required": [
        "bytes",
        "cl_type"
      ],
      "properties": {
        "cl_type": {
          "$ref": "#/definitions/CLType"
        },
        "bytes": {
          "type": "string"
        },
        "parsed": true
      },
      "additionalProperties": false
    },
    "CLType": {
      "description": "Casper types, i.e. types which can be stored and manipulated by smart contracts.\n\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).",
      "oneOf": [
        {
          "description": "`bool` primitive.",
          "type": "string",
          "enum": [
            "Bool"
          ]
        },
        {
          "description": "`i32` primitive.",
          "type": "string",
          "enum": [
            "I32"
          ]
        },
        {
          "description": "`i64` primitive.",
          "type": "string",
          "enum": [
            "I64"
          ]
        },
        {
          "description": "`u8` primitive.",
          "type": "string",
          "enum": [
            "U8"
          ]
        },
        {
          "description": "`u32` primitive.",
          "type": "string",
          "enum": [
            "U32"
          ]
        },
        {
          "description": "`u64` primitive.",
          "type": "string",
          "enum": [
            "U64"
          ]
        },
        {
          "description": "[`U128`] large unsigned integer type.",
          "type": "string",
          "enum": [
            "U128"
          ]
        },
        {
          "description": "[`U256`] large unsigned integer type.",
          "type": "string",
          "enum": [
            "U256"
          ]
        },
        {
          "description": "[`U512`] large unsigned integer type.",
          "type": "string",
          "enum": [
            "U512"
          ]
        },
        {
          "description": "`()` primitive.",
          "type": "string",
          "enum": [
            "Unit"
          ]
        },
        {
          "description": "`String` primitive.",
          "type": "string",
          "enum": [
            "String"
          ]
        },
        {
          "description": "[`Key`] system type.",
          "type": "string",
          "enum": [
            "Key"
          ]
        },
        {
          "description": "[`URef`] system type.",
          "type": "string",
          "enum": [
            "URef"
          ]
        },
        {
          "description": "[`PublicKey`](crate::PublicKey) system type.",
          "type": "string",
          "enum": [
            "PublicKey"
          ]
        },
        {
          "description": "`Option` of a `CLType`.",
          "type": "object",
          "required": [
            "Option"
          ],
          "properties": {
            "Option": {
              "$ref": "#/definitions/CLType"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Variable-length list of a single `CLType` (comparable to a `Vec`).",
          "type": "object",
          "required": [
            "List"
          ],
          "properties": {
            "List": {
              "$ref": "#/definitions/CLType"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Fixed-length list of a single `CLType` (comparable to a Rust array).",
          "type": "object",
          "required": [
            "ByteArray"
          ],
          "properties": {
            "ByteArray": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "`Result` with `Ok` and `Err` variants of `CLType`s.",
          "type": "object",
          "required": [
            "Result"
          ],
          "properties": {
            "Result": {
              "type": "object",
              "required": [
                "err",
                "ok"
              ],
              "properties": {
                "ok": {
                  "$ref": "#/definitions/CLType"
                },
                "err": {
                  "$ref": "#/definitions/CLType"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Map with keys of a single `CLType` and values of a single `CLType`.",
          "type": "object",
          "required": [
            "Map"
          ],
          "properties": {
            "Map": {
              "type": "object",
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "$ref": "#/definitions/CLType"
                },
                "value": {
                  "$ref": "#/definitions/CLType"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "1-ary tuple of a `CLType`.",
          "type": "object",
          "required": [
            "Tuple1"
          ],
          "properties": {
            "Tuple1": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CLType"
              },
              "maxItems": 1,
              "minItems": 1
            }
          },
          "additionalProperties": false
        },
        {
          "description": "2-ary tuple of `CLType`s.",
          "type": "object",
          "required": [
            "Tuple2"
          ],
          "properties": {
            "Tuple2": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CLType"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "description": "3-ary tuple of `CLType`s.",
          "type": "object",
          "required": [
            "Tuple3"
          ],
          "properties": {
            "Tuple3": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CLType"
              },
              "maxItems": 3,
              "minItems": 3
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unspecified type.",
          "type": "string",
          "enum": [
            "Any"
          ]
        }
      ]
    },
    "AddressableEntityHash": {
      "description": "The hex-encoded address of the addressable entity.",
      "type": "string"
    },
    "PackageHash": {
      "description": "The hex-encoded address of the Package.",
      "type": "string"
    },
    "DeployApproval": {
      "description": "A struct containing a signature of a deploy hash and the public key of the signer.",
      "type": "object",
      "required": [
        "signature",
        "signer"
      ],
      "properties": {
        "signer": {
          "$ref": "#/definitions/PublicKey"
        },
        "signature": {
          "$ref": "#/definitions/Signature"
        }
      },
      "additionalProperties": false
    },
    "Signature": {
      "description": "Hex-encoded cryptographic signature, including the algorithm tag prefix.",
      "type": "string"
    },
    "TransactionV1": {
      "description": "A unit of work sent by a client to the network, which when executed can cause global state to be altered.",
      "type": "object",
      "required": [
        "approvals",
        "body",
        "hash",
        "header"
      ],
      "properties": {
        "hash": {
          "$ref": "#/definitions/TransactionV1Hash"
        },
        "header": {
          "$ref": "#/definitions/TransactionV1Header"
        },
        "body": {
          "$ref": "#/definitions/TransactionV1Body"
        },
        "approvals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionV1Approval"
          },
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },
    "TransactionV1Header": {
      "description": "The header portion of a TransactionV1.",
      "type": "object",
      "required": [
        "body_hash",
        "chain_name",
        "initiator_addr",
        "pricing_mode",
        "timestamp",
        "ttl"
      ],
      "properties": {
        "chain_name": {
          "type": "string"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        },
        "ttl": {
          "$ref": "#/definitions/TimeDiff"
        },
        "body_hash": {
          "$ref": "#/definitions/Digest"
        },
        "pricing_mode": {
          "$ref": "#/definitions/PricingMode"
        },
        "payment_amount": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "initiator_addr": {
          "$ref": "#/definitions/InitiatorAddr"
        }
      },
      "additionalProperties": false
    },
    "PricingMode": {
      "description": "Pricing mode of a Transaction.",
      "oneOf": [
        {
          "description": "Multiplies the gas used by the given amount.\n\nThis is the same behaviour as for the `Deploy::gas_price`.",
          "type": "object",
          "required": [
            "GasPriceMultiplier"
          ],
          "properties": {
            "GasPriceMultiplier": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "First-in-first-out handling of transactions, i.e. pricing mode is irrelevant to ordering.",
          "type": "string",
          "enum": [
            "Fixed"
          ]
        },
        {
          "description": "The payment for this transaction was previously reserved.",
          "type": "string",
          "enum": [
            "Reserved"
          ]
        }
      ]
    },
    "InitiatorAddr": {
      "description": "The address of the initiator of a TransactionV1.",
      "oneOf": [
        {
          "description": "The public key of the initiator.",
          "type": "object",
          "required": [
            "PublicKey"
          ],
          "properties": {
            "PublicKey": {
              "$ref": "#/definitions/PublicKey"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The account hash derived from the public key of the initiator.",
          "type": "object",
          "required": [
            "AccountHash"
          ],
          "properties": {
            "AccountHash": {
              "$ref": "#/definitions/AccountHash"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AccountHash": {
      "description": "Account hash as a formatted string.",
      "type": "string"
    },
    "TransactionV1Body": {
      "description": "Body of a `TransactionV1`.",
      "type": "object",
      "required": [
        "args",
        "entry_point",
        "scheduling",
        "target"
      ],
      "properties": {
        "args": {
          "$ref": "#/definitions/RuntimeArgs"
        },
        "target": {
          "$ref": "#/definitions/TransactionTarget"
        },
        "entry_point": {
          "$ref": "#/definitions/TransactionEntryPoint"
        },
        "scheduling": {
          "$ref": "#/definitions/TransactionScheduling"
        }
      },
      "additionalProperties": false
    },
    "TransactionTarget": {
      "description": "Execution target of a Transaction.",
      "oneOf": [
        {
          "description": "The execution target is a native operation (e.g. a transfer).",
          "type": "string",
          "enum": [
            "Native"
          ]
        },
        {
          "description": "The execution target is a stored entity or package.",
          "type": "object",
          "required": [
            "Stored"
          ],
          "properties": {
            "Stored": {
              "type": "object",
              "required": [
                "id",
                "runtime"
              ],
              "properties": {
                "id": {
                  "description": "The identifier of the stored execution target.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/TransactionInvocationTarget"
                    }
                  ]
                },
                "runtime": {
                  "description": "The execution runtime to use.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/TransactionRuntime"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The execution target is the included module bytes, i.e. compiled Wasm.",
          "type": "object",
          "required": [
            "Session"
          ],
          "properties": {
            "Session": {
              "type": "object",
              "required": [
                "kind",
                "module_bytes",
                "runtime"
              ],
              "properties": {
                "kind": {
                  "description": "The kind of session.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/TransactionSessionKind"
                    }
                  ]
                },
                "module_bytes": {
                  "description": "The compiled Wasm.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Bytes"
                    }
                  ]
                },
                "runtime": {
                  "description": "The execution runtime to use.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/TransactionRuntime"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransactionInvocationTarget": {
      "description": "Identifier of a `Stored` transaction target.",
      "oneOf": [
        {
          "description": "Hex-encoded entity address identifying the invocable entity.",
          "type": "object",
          "required": [
            "InvocableEntity"
          ],
          "properties": {
            "InvocableEntity": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The alias identifying the invocable entity.",
          "type": "object",
          "required": [
            "InvocableEntityAlias"
          ],
          "properties": {
            "InvocableEntityAlias": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The address and optional version identifying the package.",
          "type": "object",
          "required": [
            "Package"
          ],
          "properties": {
            "Package": {
              "type": "object",
              "required": [
                "addr"
              ],
              "properties": {
                "addr": {
                  "description": "Hex-encoded address of the package.",
                  "type": "string"
                },
                "version": {
                  "description": "The package version.\n\nIf `None`, the latest enabled version is implied.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The alias and optional version identifying the package.",
          "type": "object",
          "required": [
            "PackageAlias"
          ],
          "properties": {
            "PackageAlias": {
              "type": "object",
              "required": [
                "alias"
              ],
              "properties": {
                "alias": {
                  "description": "The package alias.",
                  "type": "string"
                },
                "version": {
                  "description": "The package version.\n\nIf `None`, the latest enabled version is implied.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransactionRuntime": {
      "description": "Runtime used to execute a Transaction.",
      "oneOf": [
        {
          "description": "The Casper Version 1 Virtual Machine.",
          "type": "string",
          "enum": [
            "VmCasperV1"
          ]
        }
      ]
    },
    "TransactionSessionKind": {
      "description": "Session kind of a Transaction.",
      "oneOf": [
        {
          "description": "A standard (non-special-case) session.\n\nThis kind of session is not allowed to install or upgrade a stored contract, but can call stored contracts.",
          "type": "string",
          "enum": [
            "Standard"
          ]
        },
        {
          "description": "A session which installs a stored contract.",
          "type": "string",
          "enum": [
            "Installer"
          ]
        },
        {
          "description": "A session which upgrades a previously-installed stored contract.  Such a session must have \"package_id: PackageIdentifier\" runtime arg present.",
          "type": "string",
          "enum": [
            "Upgrader"
          ]
        },
        {
          "description": "A session which doesn't call any stored contracts.\n\nThis kind of session is not allowed to install or upgrade a stored contract.",
          "type": "string",
          "enum": [
            "Isolated"
          ]
        }
      ]
    },
    "TransactionEntryPoint": {
      "description": "Entry point of a Transaction.",
      "oneOf": [
        {
          "description": "A non-native, arbitrary entry point.",
          "type": "object",
          "required": [
            "Custom"
          ],
          "properties": {
            "Custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The `transfer` native entry point, used to transfer `Motes` from a source purse to a target purse.",
          "type": "string",
          "enum": [
            "Transfer"
          ]
        },
        {
          "description": "The `add_bid` native entry point, used to create or top off a bid purse.",
          "type": "string",
          "enum": [
            "AddBid"
          ]
        },
        {
          "description": "The `withdraw_bid` native entry point, used to decrease a stake.",
          "type": "string",
          "enum": [
            "WithdrawBid"
          ]
        },
        {
          "description": "The `delegate` native entry point, used to add a new delegator or increase an existing delegator's stake.",
          "type": "string",
          "enum": [
            "Delegate"
          ]
        },
        {
          "description": "The `undelegate` native entry point, used to reduce a delegator's stake or remove the delegator if the remaining stake is 0.",
          "type": "string",
          "enum": [
            "Undelegate"
          ]
        },
        {
          "description": "The `redelegate` native entry point, used to reduce a delegator's stake or remove the delegator if the remaining stake is 0, and after the unbonding delay, automatically delegate to a new validator.",
          "type": "string",
          "enum": [
            "Redelegate"
          ]
        }
      ]
    },
    "TransactionScheduling": {
      "description": "Scheduling mode of a Transaction.",
      "oneOf": [
        {
          "description": "No special scheduling applied.",
          "type": "string",
          "enum": [
            "Standard"
          ]
        },
        {
          "description": "Execution should be scheduled for the specified era.",
          "type": "object",
          "required": [
            "FutureEra"
          ],
          "properties": {
            "FutureEra": {
              "$ref": "#/definitions/EraId"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Execution should be scheduled for the specified timestamp or later.",
          "type": "object",
          "required": [
            "FutureTimestamp"
          ],
          "properties": {
            "FutureTimestamp": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransactionV1Approval": {
      "description": "A struct containing a signature of a transaction hash and the public key of the signer.",
      "type": "object",
      "required": [
        "signature",
        "signer"
      ],
      "properties": {
        "signer": {
          "$ref": "#/definitions/PublicKey"
        },
        "signature": {
          "$ref": "#/definitions/Signature"
        }
      },
      "additionalProperties": false
    },
    "ExecutionResult": {
      "description": "The versioned result of executing a single deploy.",
      "oneOf": [
        {
          "description": "Version 1 of execution result type.",
          "type": "object",
          "required": [
            "Version1"
          ],
          "properties": {
            "Version1": {
              "$ref": "#/definitions/ExecutionResultV1"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Version 2 of execution result type.",
          "type": "object",
          "required": [
            "Version2"
          ],
          "properties": {
            "Version2": {
              "$ref": "#/definitions/ExecutionResultV2"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ExecutionResultV1": {
      "description": "The result of executing a single deploy.",
      "oneOf": [
        {
          "description": "The result of a failed execution.",
          "type": "object",
          "required": [
            "Failure"
          ],
          "properties": {
            "Failure": {
              "type": "object",
              "required": [
                "cost",
                "effect",
                "error_message",
                "transfers"
              ],
              "properties": {
                "effect": {
                  "description": "The effect of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ExecutionEffect"
                    }
                  ]
                },
                "transfers": {
                  "description": "A record of Transfers performed while executing the deploy.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransferAddr"
                  }
                },
                "cost": {
                  "description": "The cost of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                },
                "error_message": {
                  "description": "The error message associated with executing the deploy.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The result of a successful execution.",
          "type": "object",
          "required": [
            "Success"
          ],
          "properties": {
            "Success": {
              "type": "object",
              "required": [
                "cost",
                "effect",
                "transfers"
              ],
              "properties": {
                "effect": {
                  "description": "The effect of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ExecutionEffect"
                    }
                  ]
                },
                "transfers": {
                  "description": "A record of Transfers performed while executing the deploy.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransferAddr"
                  }
                },
                "cost": {
                  "description": "The cost of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ExecutionEffect": {
      "description": "The sequence of execution transforms from a single deploy.",
      "type": "object",
      "required": [
        "operations",
        "transforms"
      ],
      "properties": {
        "operations": {
          "description": "The resulting operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        },
        "transforms": {
          "description": "The sequence of execution transforms.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransformEntry"
          }
        }
      },
      "additionalProperties": false
    },
    "Operation": {
      "description": "An operation performed while executing a deploy.",
      "type": "object",
      "required": [
        "key",
        "kind"
      ],
      "properties": {
        "key": {
          "description": "The formatted string of the `Key`.",
          "type": "string"
        },
        "kind": {
          "description": "The type of operation.",
          "allOf": [
            {
              "$ref": "#/definitions/OpKind"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "OpKind": {
      "description": "The type of operation performed while executing a deploy.",
      "oneOf": [
        {
          "description": "A read operation.",
          "type": "string",
          "enum": [
            "Read"
          ]
        },
        {
          "description": "A write operation.",
          "type": "string",
          "enum": [
            "Write"
          ]
        },
        {
          "description": "An addition.",
          "type": "string",
          "enum": [
            "Add"
          ]
        },
        {
          "description": "An operation which has no effect.",
          "type": "string",
          "enum": [
            "NoOp"
          ]
        },
        {
          "description": "A prune operation.",
          "type": "string",
          "enum": [
            "Prune"
          ]
        }
      ]
    },
    "TransformEntry": {
      "description": "A transformation performed while executing a deploy.",
      "type": "object",
      "required": [
        "key",
        "transform"
      ],
      "properties": {
        "key": {
          "description": "The formatted string of the `Key`.",
          "type": "string"
        },
        "transform": {
          "description": "The transformation.",
          "allOf": [
            {
              "$ref": "#/definitions/Transform"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Transform": {
      "description": "The actual transformation performed while executing a deploy.",
      "oneOf": [
        {
          "description": "A transform having no effect.",
          "type": "string",
          "enum": [
            "Identity"
          ]
        },
        {
          "description": "Writes the given CLValue to global state.",
          "type": "object",
          "required": [
            "WriteCLValue"
          ],
          "properties": {
            "WriteCLValue": {
              "$ref": "#/definitions/CLValue"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the given Account to global state.",
          "type": "object",
          "required": [
            "WriteAccount"
          ],
          "properties": {
            "WriteAccount": {
              "$ref": "#/definitions/AccountHash"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes a smart contract as Wasm to global state.",
          "type": "string",
          "enum": [
            "WriteContractWasm"
          ]
        },
        {
          "description": "Writes a smart contract to global state.",
          "type": "string",
          "enum": [
            "WriteContract"
          ]
        },
        {
          "description": "Writes a smart contract package to global state.",
          "type": "string",
          "enum": [
            "WriteContractPackage"
          ]
        },
        {
          "description": "Writes the given DeployInfo to global state.",
          "type": "object",
          "required": [
            "WriteDeployInfo"
          ],
          "properties": {
            "WriteDeployInfo": {
              "$ref": "#/definitions/DeployInfo"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the given EraInfo to global state.",
          "type": "object",
          "required": [
            "WriteEraInfo"
          ],
          "properties": {
            "WriteEraInfo": {
              "$ref": "#/definitions/EraInfo"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the given Transfer to global state.",
          "type": "object",
          "required": [
            "WriteTransfer"
          ],
          "properties": {
            "WriteTransfer": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the given Bid to global state.",
          "type": "object",
          "required": [
            "WriteBid"
          ],
          "properties": {
            "WriteBid": {
              "$ref": "#/definitions/Bid"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the given Withdraw to global state.",
          "type": "object",
          "required": [
            "WriteWithdraw"
          ],
          "properties": {
            "WriteWithdraw": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WithdrawPurse"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Adds the given `i32`.",
          "type": "object",
          "required": [
            "AddInt32"
          ],
          "properties": {
            "AddInt32": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Adds the given `u64`.",
          "type": "object",
          "required": [
            "AddUInt64"
          ],
          "properties": {
            "AddUInt64": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Adds the given `U128`.",
          "type": "object",
          "required": [
            "AddUInt128"
          ],
          "properties": {
            "AddUInt128": {
              "$ref": "#/definitions/U128"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Adds the given `U256`.",
          "type": "object",
          "required": [
            "AddUInt256"
          ],
          "properties": {
            "AddUInt256": {
              "$ref": "#/definitions/U256"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Adds the given `U512`.",
          "type": "object",
          "required": [
            "AddUInt512"
          ],
          "properties": {
            "AddUInt512": {
              "$ref": "#/definitions/U512"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Adds the given collection of named keys.",
          "type": "object",
          "required": [
            "AddKeys"
          ],
          "properties": {
            "AddKeys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NamedKey"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A failed transformation, containing an error message.",
          "type": "object",
          "required": [
            "Failure"
          ],
          "properties": {
            "Failure": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the given Unbonding to global state.",
          "type": "object",
          "required": [
            "WriteUnbonding"
          ],
          "properties": {
            "WriteUnbonding": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnbondingPurse"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the addressable entity to global state.",
          "type": "string",
          "enum": [
            "WriteAddressableEntity"
          ]
        },
        {
          "description": "Removes pathing to keyed value within global state. This is a form of soft delete; the underlying value remains in global state and is reachable from older global state root hashes where it was included in the hash up.",
          "type": "object",
          "required": [
            "Prune"
          ],
          "properties": {
            "Prune": {
              "$ref": "#/definitions/Key"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Writes the given BidKind to global state.",
          "type": "object",
          "required": [
            "WriteBidKind"
          ],
          "properties": {
            "WriteBidKind": {
              "$ref": "#/definitions/BidKind"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DeployInfo": {
      "description": "Information relating to the given Deploy.",
      "type": "object",
      "required": [
        "deploy_hash",
        "from",
        "gas",
        "source",
        "transfers"
      ],
      "properties": {
        "deploy_hash": {
          "description": "Hex-encoded Deploy hash.",
          "allOf": [
            {
              "$ref": "#/definitions/DeployHash"
            }
          ]
        },
        "transfers": {
          "description": "Transfers performed by the Deploy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferAddr"
          }
        },
        "from": {
          "description": "Account identifier of the creator of the Deploy.",
          "allOf": [
            {
              "$ref": "#/definitions/AccountHash"
            }
          ]
        },
        "source": {
          "description": "Source purse used for payment of the Deploy.",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "gas": {
          "description": "Gas cost of executing the Deploy.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TransferAddr": {
      "description": "Hex-encoded transfer address.",
      "type": "string"
    },
    "URef": {
      "description": "Hex-encoded, formatted URef.",
      "type": "string"
    },
    "EraInfo": {
      "description": "Auction metadata.  Intended to be recorded at each era.",
      "type": "object",
      "required": [
        "seigniorage_allocations"
      ],
      "properties": {
        "seigniorage_allocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeigniorageAllocation"
          }
        }
      },
      "additionalProperties": false
    },
    "SeigniorageAllocation": {
      "description": "Information about a seigniorage allocation",
      "oneOf": [
        {
          "description": "Info about a seigniorage allocation for a validator",
          "type": "object",
          "required": [
            "Validator"
          ],
          "properties": {
            "Validator": {
              "type": "object",
              "required": [
                "amount",
                "validator_public_key"
              ],
              "properties": {
                "validator_public_key": {
                  "description": "Validator's public key",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PublicKey"
                    }
                  ]
                },
                "amount": {
                  "description": "Allocated amount",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Info about a seigniorage allocation for a delegator",
          "type": "object",
          "required": [
            "Delegator"
          ],
          "properties": {
            "Delegator": {
              "type": "object",
              "required": [
                "amount",
                "delegator_public_key",
                "validator_public_key"
              ],
              "properties": {
                "delegator_public_key": {
                  "description": "Delegator's public key",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PublicKey"
                    }
                  ]
                },
                "validator_public_key": {
                  "description": "Validator's public key",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PublicKey"
                    }
                  ]
                },
                "amount": {
                  "description": "Allocated amount",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Transfer": {
      "description": "Represents a transfer from one purse to another",
      "type": "object",
      "required": [
        "amount",
        "deploy_hash",
        "from",
        "gas",
        "source",
        "target"
      ],
      "properties": {
        "deploy_hash": {
          "description": "Hex-encoded Deploy hash of Deploy that created the transfer.",
          "allOf": [
            {
              "$ref": "#/definitions/DeployHash"
            }
          ]
        },
        "from": {
          "description": "Account from which transfer was executed",
          "allOf": [
            {
              "$ref": "#/definitions/AccountHash"
            }
          ]
        },
        "to": {
          "description": "Account to which funds are transferred",
          "anyOf": [
            {
              "$ref": "#/definitions/AccountHash"
            },
            {
              "type": "null"
            }
          ]
        },
        "source": {
          "description": "Source purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "target": {
          "description": "Target purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "amount": {
          "description": "Transfer amount",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "gas": {
          "description": "Gas",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "id": {
          "description": "User-defined id",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Bid": {
      "description": "An entry in the validator map.",
      "type": "object",
      "required": [
        "bonding_purse",
        "delegation_rate",
        "delegators",
        "inactive",
        "staked_amount",
        "validator_public_key"
      ],
      "properties": {
        "validator_public_key": {
          "description": "Validator public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "bonding_purse": {
          "description": "The purse that was used for bonding.",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "staked_amount": {
          "description": "The amount of tokens staked by a validator (not including delegators).",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "delegation_rate": {
          "description": "Delegation rate.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "vesting_schedule": {
          "description": "Vesting schedule for a genesis validator. `None` if non-genesis validator.",
          "anyOf": [
            {
              "$ref": "#/definitions/VestingSchedule"
            },
            {
              "type": "null"
            }
          ]
        },
        "delegators": {
          "description": "This validator's delegators, indexed by their public keys.",
          "allOf": [
            {
              "$ref": "#/definitions/Array_of_PublicKeyAndDelegator"
            }
          ]
        },
        "inactive": {
          "description": "`true` if validator has been \"evicted\".",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "VestingSchedule": {
      "type": "object",
      "required": [
        "initial_release_timestamp_millis"
      ],
      "properties": {
        "initial_release_timestamp_millis": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "locked_amounts": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/U512"
          },
          "maxItems": 14,
          "minItems": 14
        }
      },
      "additionalProperties": false
    },
    "Array_of_PublicKeyAndDelegator": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicKeyAndDelegator"
      }
    },
    "PublicKeyAndDelegator": {
      "description": "A delegator associated with the given validator.",
      "type": "object",
      "required": [
        "delegator",
        "delegator_public_key"
      ],
      "properties": {
        "delegator_public_key": {
          "description": "The public key of the delegator.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "delegator": {
          "description": "The delegator details.",
          "allOf": [
            {
              "$ref": "#/definitions/Delegator"
            }
          ]
        }
      }
    },
    "Delegator": {
      "description": "Represents a party delegating their stake to a validator (or \"delegatee\")",
      "type": "object",
      "required": [
        "bonding_purse",
        "delegator_public_key",
        "staked_amount",
        "validator_public_key"
      ],
      "properties": {
        "delegator_public_key": {
          "$ref": "#/definitions/PublicKey"
        },
        "staked_amount": {
          "$ref": "#/definitions/U512"
        },
        "bonding_purse": {
          "$ref": "#/definitions/URef"
        },
        "validator_public_key": {
          "$ref": "#/definitions/PublicKey"
        },
        "vesting_schedule": {
          "anyOf": [
            {
              "$ref": "#/definitions/VestingSchedule"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "WithdrawPurse": {
      "description": "A withdraw purse, a legacy structure.",
      "type": "object",
      "required": [
        "amount",
        "bonding_purse",
        "era_of_creation",
        "unbonder_public_key",
        "validator_public_key"
      ],
      "properties": {
        "bonding_purse": {
          "description": "Bonding Purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "validator_public_key": {
          "description": "Validators public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "unbonder_public_key": {
          "description": "Unbonders public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "era_of_creation": {
          "description": "Era in which this unbonding request was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "amount": {
          "description": "Unbonding Amount.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "U128": {
      "description": "Decimal representation of a 128-bit integer.",
      "type": "string"
    },
    "U256": {
      "description": "Decimal representation of a 256-bit integer.",
      "type": "string"
    },
    "NamedKey": {
      "description": "A key with a name.",
      "type": "object",
      "required": [
        "key",
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the entry.",
          "type": "string"
        },
        "key": {
          "description": "The value of the entry: a casper `Key` type.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UnbondingPurse": {
      "description": "Unbonding purse.",
      "type": "object",
      "required": [
        "amount",
        "bonding_purse",
        "era_of_creation",
        "unbonder_public_key",
        "validator_public_key"
      ],
      "properties": {
        "bonding_purse": {
          "description": "Bonding Purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "validator_public_key": {
          "description": "Validators public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "unbonder_public_key": {
          "description": "Unbonders public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "era_of_creation": {
          "description": "Era in which this unbonding request was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "amount": {
          "description": "Unbonding Amount.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "new_validator": {
          "description": "The validator public key to re-delegate to.",
          "anyOf": [
            {
              "$ref": "#/definitions/PublicKey"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Key": {
      "description": "The key as a formatted string, under which data (e.g. `CLValue`s, smart contracts, user accounts) are stored in global state.",
      "type": "string"
    },
    "BidKind": {
      "description": "Auction bid variants.",
      "oneOf": [
        {
          "description": "A unified record indexed on validator data, with an embedded collection of all delegator bids assigned to that validator. The Unified variant is for legacy retrograde support, new instances will not be created going forward.",
          "type": "object",
          "required": [
            "Unified"
          ],
          "properties": {
            "Unified": {
              "$ref": "#/definitions/Bid"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A bid record containing only validator data.",
          "type": "object",
          "required": [
            "Validator"
          ],
          "properties": {
            "Validator": {
              "$ref": "#/definitions/ValidatorBid"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A bid record containing only delegator data.",
          "type": "object",
          "required": [
            "Delegator"
          ],
          "properties": {
            "Delegator": {
              "$ref": "#/definitions/Delegator"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ValidatorBid": {
      "description": "An entry in the validator map.",
      "type": "object",
      "required": [
        "bonding_purse",
        "delegation_rate",
        "inactive",
        "staked_amount",
        "validator_public_key"
      ],
      "properties": {
        "validator_public_key": {
          "description": "Validator public key",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "bonding_purse": {
          "description": "The purse that was used for bonding.",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "staked_amount": {
          "description": "The amount of tokens staked by a validator (not including delegators).",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "delegation_rate": {
          "description": "Delegation rate",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "vesting_schedule": {
          "description": "Vesting schedule for a genesis validator. `None` if non-genesis validator.",
          "anyOf": [
            {
              "$ref": "#/definitions/VestingSchedule"
            },
            {
              "type": "null"
            }
          ]
        },
        "inactive": {
          "description": "`true` if validator has been \"evicted\"",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ExecutionResultV2": {
      "description": "The result of executing a single deploy.",
      "oneOf": [
        {
          "description": "The result of a failed execution.",
          "type": "object",
          "required": [
            "Failure"
          ],
          "properties": {
            "Failure": {
              "type": "object",
              "required": [
                "cost",
                "effects",
                "error_message",
                "transfers"
              ],
              "properties": {
                "effects": {
                  "description": "The effects of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Effects"
                    }
                  ]
                },
                "transfers": {
                  "description": "A record of transfers performed while executing the deploy.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransferAddr"
                  }
                },
                "cost": {
                  "description": "The cost in Motes of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                },
                "error_message": {
                  "description": "The error message associated with executing the deploy.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The result of a successful execution.",
          "type": "object",
          "required": [
            "Success"
          ],
          "properties": {
            "Success": {
              "type": "object",
              "required": [
                "cost",
                "effects",
                "transfers"
              ],
              "properties": {
                "effects": {
                  "description": "The effects of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Effects"
                    }
                  ]
                },
                "transfers": {
                  "description": "A record of transfers performed while executing the deploy.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransferAddr"
                  }
                },
                "cost": {
                  "description": "The cost in Motes of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Effects": {
      "description": "A log of all transforms produced during execution.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Transform"
      }
    },
    "Message": {
      "description": "Message that was emitted by an addressable entity during execution.",
      "type": "object",
      "required": [
        "entity_addr",
        "index",
        "message",
        "topic_name",
        "topic_name_hash"
      ],
      "properties": {
        "entity_addr": {
          "description": "The identity of the entity that produced the message.",
          "allOf": [
            {
              "$ref": "#/definitions/AddressableEntityHash"
            }
          ]
        },
        "message": {
          "description": "The payload of the message.",
          "allOf": [
            {
              "$ref": "#/definitions/MessagePayload"
            }
          ]
        },
        "topic_name": {
          "description": "The name of the topic on which the message was emitted on.",
          "type": "string"
        },
        "topic_name_hash": {
          "description": "The hash of the name of the topic.",
          "allOf": [
            {
              "$ref": "#/definitions/TopicNameHash"
            }
          ]
        },
        "index": {
          "description": "Message index in the topic.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "MessagePayload": {
      "description": "The payload of the message emitted by an addressable entity during execution.",
      "oneOf": [
        {
          "description": "Human readable string message.",
          "type": "object",
          "required": [
            "String"
          ],
          "properties": {
            "String": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Message represented as raw bytes.",
          "type": "object",
          "required": [
            "Bytes"
          ],
          "properties": {
            "Bytes": {
              "$ref": "#/definitions/Bytes"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TopicNameHash": {
      "description": "The hash of the name of the message topic.",
      "type": "string"
    },
    "FinalitySignature": {
      "description": "A validator's signature of a block, confirming it is finalized.",
      "oneOf": [
        {
          "description": "Version 1 of the finality signature.",
          "type": "object",
          "required": [
            "V1"
          ],
          "properties": {
            "V1": {
              "$ref": "#/definitions/FinalitySignatureV1"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Version 2 of the finality signature.",
          "type": "object",
          "required": [
            "V2"
          ],
          "properties": {
            "V2": {
              "$ref": "#/definitions/FinalitySignatureV2"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FinalitySignatureV1": {
      "description": "A validator's signature of a block, confirming it is finalized.",
      "type": "object",
      "required": [
        "block_hash",
        "era_id",
        "public_key",
        "signature"
      ],
      "properties": {
        "block_hash": {
          "description": "The block hash of the associated block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "era_id": {
          "description": "The era in which the associated block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "signature": {
          "description": "The signature over the block hash of the associated block.",
          "allOf": [
            {
              "$ref": "#/definitions/Signature"
            }
          ]
        },
        "public_key": {
          "description": "The public key of the signing validator.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        }
      }
    },
    "FinalitySignatureV2": {
      "description": "A validator's signature of a block, confirming it is finalized.",
      "type": "object",
      "required": [
        "block_hash",
        "block_height",
        "chain_name_hash",
        "era_id",
        "public_key",
        "signature"
      ],
      "properties": {
        "block_hash": {
          "description": "The block hash of the associated block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "block_height": {
          "description": "The height of the associated block.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "era_id": {
          "description": "The era in which the associated block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "chain_name_hash": {
          "description": "The hash of the chain name of the associated block.",
          "allOf": [
            {
              "$ref": "#/definitions/ChainNameDigest"
            }
          ]
        },
        "signature": {
          "description": "The signature over the block hash of the associated block.",
          "allOf": [
            {
              "$ref": "#/definitions/Signature"
            }
          ]
        },
        "public_key": {
          "description": "The public key of the signing validator.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        }
      }
    },
    "ChainNameDigest": {
      "description": "Hex-encoded cryptographic hash of a chain name.",
      "allOf": [
        {
          "$ref": "#/definitions/Digest"
        }
      ]
    }
  }
}
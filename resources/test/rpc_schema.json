{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OpenRpcSchema",
  "examples": [
    {
      "openrpc": "1.0.0-rc1",
      "info": {
        "version": "1.5.2",
        "title": "Client API of Casper Node",
        "description": "This describes the JSON-RPC 2.0 API of a node on the Casper network.",
        "contact": {
          "name": "Casper Labs",
          "url": "https://casperlabs.io"
        },
        "license": {
          "name": "APACHE LICENSE, VERSION 2.0",
          "url": "https://www.apache.org/licenses/LICENSE-2.0"
        }
      },
      "servers": [
        {
          "name": "any Casper Network node",
          "url": "http://IP:PORT/rpc/"
        }
      ],
      "methods": [
        {
          "name": "account_put_deploy",
          "summary": "receives a Deploy to be executed by the network",
          "params": [
            {
              "name": "deploy",
              "schema": {
                "description": "The `Deploy`.",
                "$ref": "#/components/schemas/Deploy"
              },
              "required": true
            }
          ],
          "result": {
            "name": "account_put_deploy_result",
            "schema": {
              "description": "Result for \"account_put_deploy\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "deploy_hash"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "deploy_hash": {
                  "description": "The deploy hash.",
                  "$ref": "#/components/schemas/DeployHash"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "account_put_deploy_example",
              "params": [
                {
                  "name": "deploy",
                  "value": {
                    "hash": "5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa",
                    "header": {
                      "account": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                      "timestamp": "2020-11-17T00:39:24.072Z",
                      "ttl": "1h",
                      "gas_price": 1,
                      "body_hash": "d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50",
                      "dependencies": [
                        "0101010101010101010101010101010101010101010101010101010101010101"
                      ],
                      "chain_name": "casper-example"
                    },
                    "payment": {
                      "StoredContractByName": {
                        "name": "casper-example",
                        "entry_point": "example-entry-point",
                        "args": [
                          [
                            "amount",
                            {
                              "cl_type": "I32",
                              "bytes": "e8030000",
                              "parsed": 1000
                            }
                          ]
                        ]
                      }
                    },
                    "session": {
                      "Transfer": {
                        "args": [
                          [
                            "amount",
                            {
                              "cl_type": "I32",
                              "bytes": "e8030000",
                              "parsed": 1000
                            }
                          ]
                        ]
                      }
                    },
                    "approvals": [
                      {
                        "signer": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                        "signature": "014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007"
                      }
                    ]
                  }
                }
              ],
              "result": {
                "name": "account_put_deploy_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "deploy_hash": "5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa"
                }
              }
            }
          ]
        },
        {
          "name": "info_get_deploy",
          "summary": "returns a Deploy from the network",
          "params": [
            {
              "name": "deploy_hash",
              "schema": {
                "description": "The deploy hash.",
                "$ref": "#/components/schemas/DeployHash"
              },
              "required": true
            },
            {
              "name": "finalized_approvals",
              "schema": {
                "description": "Whether to return the deploy with the finalized approvals substituted. If `false` or omitted, returns the deploy with the approvals that were originally received by the node.",
                "default": false,
                "type": "boolean"
              },
              "required": false
            }
          ],
          "result": {
            "name": "info_get_deploy_result",
            "schema": {
              "description": "Result for \"info_get_deploy\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "deploy"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "deploy": {
                  "description": "The deploy.",
                  "$ref": "#/components/schemas/Deploy"
                },
                "block_hash": {
                  "$ref": "#/components/schemas/BlockHash"
                },
                "block_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "execution_result": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ExecutionResult"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "info_get_deploy_example",
              "params": [
                {
                  "name": "deploy_hash",
                  "value": "5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa"
                },
                {
                  "name": "finalized_approvals",
                  "value": true
                }
              ],
              "result": {
                "name": "info_get_deploy_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "deploy": {
                    "hash": "5c9b3b099c1378aa8e4a5f07f59ff1fcdc69a83179427c7e67ae0377d94d93fa",
                    "header": {
                      "account": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                      "timestamp": "2020-11-17T00:39:24.072Z",
                      "ttl": "1h",
                      "gas_price": 1,
                      "body_hash": "d53cf72d17278fd47d399013ca389c50d589352f1a12593c0b8e01872a641b50",
                      "dependencies": [
                        "0101010101010101010101010101010101010101010101010101010101010101"
                      ],
                      "chain_name": "casper-example"
                    },
                    "payment": {
                      "StoredContractByName": {
                        "name": "casper-example",
                        "entry_point": "example-entry-point",
                        "args": [
                          [
                            "amount",
                            {
                              "cl_type": "I32",
                              "bytes": "e8030000",
                              "parsed": 1000
                            }
                          ]
                        ]
                      }
                    },
                    "session": {
                      "Transfer": {
                        "args": [
                          [
                            "amount",
                            {
                              "cl_type": "I32",
                              "bytes": "e8030000",
                              "parsed": 1000
                            }
                          ]
                        ]
                      }
                    },
                    "approvals": [
                      {
                        "signer": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                        "signature": "014c1a89f92e29dd74fc648f741137d9caf4edba97c5f9799ce0c9aa6b0c9b58db368c64098603dbecef645774c05dff057cb1f91f2cf390bbacce78aa6f084007"
                      }
                    ]
                  },
                  "block_hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28",
                  "block_height": 10,
                  "execution_result": {
                    "Version2": {
                      "Success": {
                        "effects": [
                          {
                            "key": "account-hash-2c4a11c062a8a337bfc97e27fd66291caeb2c65865dcb5d3ef3759c4c97efecb",
                            "kind": {
                              "AddUInt64": 8
                            }
                          },
                          {
                            "key": "deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1",
                            "kind": "Identity"
                          }
                        ],
                        "transfers": [
                          "transfer-5959595959595959595959595959595959595959595959595959595959595959",
                          "transfer-8282828282828282828282828282828282828282828282828282828282828282"
                        ],
                        "cost": "123456"
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        {
          "name": "state_get_account_info",
          "summary": "returns an Account from the network",
          "params": [
            {
              "name": "account_identifier",
              "schema": {
                "description": "The public key of the Account.",
                "$ref": "#/components/schemas/AccountIdentifier"
              },
              "required": true
            },
            {
              "name": "block_identifier",
              "schema": {
                "description": "The block identifier.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BlockIdentifier"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "required": false
            }
          ],
          "result": {
            "name": "state_get_account_info_result",
            "schema": {
              "description": "Result for \"state_get_account_info\" RPC response.",
              "type": "object",
              "required": [
                "account",
                "api_version",
                "merkle_proof"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "account": {
                  "description": "The account.",
                  "$ref": "#/components/schemas/Account"
                },
                "merkle_proof": {
                  "description": "The Merkle proof.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "state_get_account_info_example",
              "params": [
                {
                  "name": "account_identifier",
                  "value": "013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29"
                },
                {
                  "name": "block_identifier",
                  "value": {
                    "Hash": "0707070707070707070707070707070707070707070707070707070707070707"
                  }
                }
              ],
              "result": {
                "name": "state_get_account_info_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "account": {
                    "account_hash": "account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c",
                    "named_keys": [
                      {
                        "name": "main_purse",
                        "key": "uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007"
                      }
                    ],
                    "main_purse": "uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007",
                    "associated_keys": [
                      {
                        "account_hash": "account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c",
                        "weight": 1
                      }
                    ],
                    "action_thresholds": {
                      "deployment": 1,
                      "key_management": 1
                    }
                  },
                  "merkle_proof": "01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3"
                }
              }
            }
          ]
        },
        {
          "name": "state_get_dictionary_item",
          "summary": "returns an item from a Dictionary",
          "params": [
            {
              "name": "state_root_hash",
              "schema": {
                "description": "Hash of the state root",
                "$ref": "#/components/schemas/Digest"
              },
              "required": true
            },
            {
              "name": "dictionary_identifier",
              "schema": {
                "description": "The Dictionary query identifier.",
                "$ref": "#/components/schemas/DictionaryIdentifier"
              },
              "required": true
            }
          ],
          "result": {
            "name": "state_get_dictionary_item_result",
            "schema": {
              "description": "Result for \"state_get_dictionary_item\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "dictionary_key",
                "merkle_proof",
                "stored_value"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "dictionary_key": {
                  "description": "The key under which the value is stored.",
                  "type": "string"
                },
                "stored_value": {
                  "description": "The stored value.",
                  "$ref": "#/components/schemas/StoredValue"
                },
                "merkle_proof": {
                  "description": "The Merkle proof.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "state_get_dictionary_item_example",
              "params": [
                {
                  "name": "state_root_hash",
                  "value": "0808080808080808080808080808080808080808080808080808080808080808"
                },
                {
                  "name": "dictionary_identifier",
                  "value": {
                    "URef": {
                      "seed_uref": "uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007",
                      "dictionary_item_key": "a_unique_entry_identifier"
                    }
                  }
                }
              ],
              "result": {
                "name": "state_get_dictionary_item_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "dictionary_key": "dictionary-67518854aa916c97d4e53df8570c8217ccc259da2721b692102d76acd0ee8d1f",
                  "stored_value": {
                    "CLValue": {
                      "cl_type": "U64",
                      "bytes": "0100000000000000",
                      "parsed": 1
                    }
                  },
                  "merkle_proof": "01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3"
                }
              }
            }
          ]
        },
        {
          "name": "query_global_state",
          "summary": "a query to global state using either a Block hash or state root hash",
          "params": [
            {
              "name": "key",
              "schema": {
                "description": "The key under which to query.",
                "$ref": "#/components/schemas/Key"
              },
              "required": true
            },
            {
              "name": "state_identifier",
              "schema": {
                "description": "The identifier used for the query. If not provided, the tip of the chain will be used.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/GlobalStateIdentifier"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "required": false
            },
            {
              "name": "path",
              "schema": {
                "description": "The path components starting from the key as base.",
                "default": [],
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "required": false
            }
          ],
          "result": {
            "name": "query_global_state_result",
            "schema": {
              "description": "Result for \"query_global_state\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "merkle_proof",
                "stored_value"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "block_header": {
                  "description": "The block header if a Block hash was provided.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/BlockHeader"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "stored_value": {
                  "description": "The stored value.",
                  "$ref": "#/components/schemas/StoredValue"
                },
                "merkle_proof": {
                  "description": "The Merkle proof.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "query_global_state_example",
              "params": [
                {
                  "name": "state_identifier",
                  "value": {
                    "BlockHash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28"
                  }
                },
                {
                  "name": "key",
                  "value": "deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1"
                },
                {
                  "name": "path",
                  "value": []
                }
              ],
              "result": {
                "name": "query_global_state_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "block_header": {
                    "parent_hash": "0707070707070707070707070707070707070707070707070707070707070707",
                    "state_root_hash": "0808080808080808080808080808080808080808080808080808080808080808",
                    "body_hash": "0505050505050505050505050505050505050505050505050505050505050505",
                    "random_bit": true,
                    "accumulated_seed": "ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5",
                    "era_end": {
                      "era_report": {
                        "equivocators": [
                          "013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29"
                        ],
                        "rewards": [],
                        "inactive_validators": [
                          "018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394"
                        ]
                      },
                      "next_era_validator_weights": [
                        {
                          "validator": "013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29",
                          "weight": "123"
                        },
                        {
                          "validator": "016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1",
                          "weight": "456"
                        },
                        {
                          "validator": "018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17",
                          "weight": "789"
                        }
                      ]
                    },
                    "timestamp": "2020-11-17T00:39:24.072Z",
                    "era_id": 1,
                    "height": 10,
                    "protocol_version": "1.0.0"
                  },
                  "stored_value": {
                    "Account": {
                      "account_hash": "account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c",
                      "named_keys": [
                        {
                          "name": "main_purse",
                          "key": "uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007"
                        }
                      ],
                      "main_purse": "uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007",
                      "associated_keys": [
                        {
                          "account_hash": "account-hash-e94daaff79c2ab8d9c31d9c3058d7d0a0dd31204a5638dc1451fa67b2e3fb88c",
                          "weight": 1
                        }
                      ],
                      "action_thresholds": {
                        "deployment": 1,
                        "key_management": 1
                      }
                    }
                  },
                  "merkle_proof": "01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3"
                }
              }
            }
          ]
        },
        {
          "name": "query_balance",
          "summary": "query for a balance using a purse identifier and a state identifier",
          "params": [
            {
              "name": "purse_identifier",
              "schema": {
                "description": "The identifier to obtain the purse corresponding to balance query.",
                "$ref": "#/components/schemas/PurseIdentifier"
              },
              "required": true
            },
            {
              "name": "state_identifier",
              "schema": {
                "description": "The state identifier used for the query, if none is passed the tip of the chain will be used.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/GlobalStateIdentifier"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "required": false
            }
          ],
          "result": {
            "name": "query_balance_result",
            "schema": {
              "description": "Result for \"query_balance\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "balance"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "balance": {
                  "description": "The balance represented in motes.",
                  "$ref": "#/components/schemas/U512"
                }
              }
            }
          },
          "examples": [
            {
              "name": "query_balance_example",
              "params": [
                {
                  "name": "state_identifier",
                  "value": {
                    "BlockHash": "0707070707070707070707070707070707070707070707070707070707070707"
                  }
                },
                {
                  "name": "purse_identifier",
                  "value": {
                    "main_purse_under_account_hash": "account-hash-0909090909090909090909090909090909090909090909090909090909090909"
                  }
                }
              ],
              "result": {
                "name": "query_balance_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "balance": "123456"
                }
              }
            }
          ]
        },
        {
          "name": "info_get_peers",
          "summary": "returns a list of peers connected to the node",
          "params": [],
          "result": {
            "name": "info_get_peers_result",
            "schema": {
              "description": "Result for \"info_get_peers\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "peers"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "peers": {
                  "description": "The node ID and network address of each connected peer.",
                  "$ref": "#/components/schemas/PeersMap"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "info_get_peers_example",
              "params": [],
              "result": {
                "name": "info_get_peers_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "peers": [
                    {
                      "node_id": "tls:0101..0101",
                      "address": "127.0.0.1:54321"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "info_get_status",
          "summary": "returns the current status of the node",
          "params": [],
          "result": {
            "name": "info_get_status_result",
            "schema": {
              "description": "Result for \"info_get_status\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "available_block_range",
                "block_sync",
                "build_version",
                "chainspec_name",
                "last_progress",
                "peers",
                "reactor_state",
                "starting_state_root_hash",
                "uptime"
              ],
              "properties": {
                "peers": {
                  "description": "The node ID and network address of each connected peer.",
                  "$ref": "#/components/schemas/PeersMap"
                },
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "build_version": {
                  "description": "The compiled node version.",
                  "type": "string"
                },
                "chainspec_name": {
                  "description": "The chainspec name.",
                  "type": "string"
                },
                "starting_state_root_hash": {
                  "description": "The state root hash of the lowest block in the available block range.",
                  "$ref": "#/components/schemas/Digest"
                },
                "last_added_block_info": {
                  "description": "The minimal info of the last block from the linear chain.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/MinimalBlockInfo"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "our_public_signing_key": {
                  "description": "Our public signing key.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PublicKey"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "round_length": {
                  "description": "The next round length if this node is a validator.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TimeDiff"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "next_upgrade": {
                  "description": "Information about the next scheduled upgrade.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/NextUpgrade"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "uptime": {
                  "description": "Time that passed since the node has started.",
                  "$ref": "#/components/schemas/TimeDiff"
                },
                "reactor_state": {
                  "description": "The current state of node reactor.",
                  "$ref": "#/components/schemas/ReactorState"
                },
                "last_progress": {
                  "description": "Timestamp of the last recorded progress in the reactor.",
                  "$ref": "#/components/schemas/Timestamp"
                },
                "available_block_range": {
                  "description": "The available block range in storage.",
                  "$ref": "#/components/schemas/AvailableBlockRange"
                },
                "block_sync": {
                  "description": "The status of the block synchronizer builders.",
                  "$ref": "#/components/schemas/BlockSynchronizerStatus"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "info_get_status_example",
              "params": [],
              "result": {
                "name": "info_get_status_example_result",
                "value": {
                  "peers": [
                    {
                      "node_id": "tls:0101..0101",
                      "address": "127.0.0.1:54321"
                    }
                  ],
                  "api_version": "1.5.2",
                  "build_version": "1.0.0-xxxxxxxxx@DEBUG",
                  "chainspec_name": "casper-example",
                  "starting_state_root_hash": "0000000000000000000000000000000000000000000000000000000000000000",
                  "last_added_block_info": {
                    "hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28",
                    "timestamp": "2020-11-17T00:39:24.072Z",
                    "era_id": 1,
                    "height": 10,
                    "state_root_hash": "0808080808080808080808080808080808080808080808080808080808080808",
                    "creator": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c"
                  },
                  "our_public_signing_key": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                  "round_length": "1m 5s 536ms",
                  "next_upgrade": {
                    "activation_point": 42,
                    "protocol_version": "2.0.1"
                  },
                  "uptime": "13s",
                  "reactor_state": "Initialize",
                  "last_progress": "1970-01-01T00:00:00.000Z",
                  "available_block_range": {
                    "low": 0,
                    "high": 0
                  },
                  "block_sync": {
                    "historical": {
                      "block_hash": "16ddf28e2b3d2e17f4cef36f8b58827eca917af225d139b0c77df3b4a67dc55e",
                      "block_height": 40,
                      "acquisition_state": "have strict finality(40) for: block hash 16dd..c55e"
                    },
                    "forward": {
                      "block_hash": "59907b1e32a9158169c4d89d9ce5ac9164fc31240bfcfb0969227ece06d74983",
                      "block_height": 6701,
                      "acquisition_state": "have block body(6701) for: block hash 5990..4983"
                    }
                  }
                }
              }
            }
          ]
        },
        {
          "name": "info_get_validator_changes",
          "summary": "returns status changes of active validators",
          "params": [],
          "result": {
            "name": "info_get_validator_changes_result",
            "schema": {
              "description": "Result for the \"info_get_validator_changes\" RPC.",
              "type": "object",
              "required": [
                "api_version",
                "changes"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "changes": {
                  "description": "The validators' status changes.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JsonValidatorChanges"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "info_get_validator_changes_example",
              "params": [],
              "result": {
                "name": "info_get_validator_changes_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "changes": [
                    {
                      "public_key": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                      "status_changes": [
                        {
                          "era_id": 1,
                          "validator_change": "Added"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "info_get_chainspec",
          "summary": "returns the raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files",
          "params": [],
          "result": {
            "name": "info_get_chainspec_result",
            "schema": {
              "description": "Result for the \"info_get_chainspec\" RPC.",
              "type": "object",
              "required": [
                "api_version",
                "chainspec_bytes"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "chainspec_bytes": {
                  "description": "The chainspec file bytes.",
                  "$ref": "#/components/schemas/ChainspecRawBytes"
                }
              }
            }
          },
          "examples": [
            {
              "name": "info_get_chainspec_example",
              "params": [],
              "result": {
                "name": "info_get_chainspec_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "chainspec_bytes": {
                    "chainspec_bytes": "2a2a",
                    "maybe_genesis_accounts_bytes": null,
                    "maybe_global_state_bytes": null
                  }
                }
              }
            }
          ]
        },
        {
          "name": "chain_get_block",
          "summary": "returns a Block from the network",
          "params": [
            {
              "name": "block_identifier",
              "schema": {
                "description": "The block identifier.",
                "$ref": "#/components/schemas/BlockIdentifier"
              },
              "required": false
            }
          ],
          "result": {
            "name": "chain_get_block_result",
            "schema": {
              "description": "Result for \"chain_get_block\" RPC response.",
              "type": "object",
              "required": [
                "api_version"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "block_with_signatures": {
                  "description": "The block, if found.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/JsonBlockWithSignatures"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "chain_get_block_example",
              "params": [
                {
                  "name": "block_identifier",
                  "value": {
                    "Hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28"
                  }
                }
              ],
              "result": {
                "name": "chain_get_block_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "block_with_signatures": {
                    "block": {
                      "Version2": {
                        "hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28",
                        "header": {
                          "parent_hash": "0707070707070707070707070707070707070707070707070707070707070707",
                          "state_root_hash": "0808080808080808080808080808080808080808080808080808080808080808",
                          "body_hash": "9703ac20bdd12ad4ce26e6ceac16cb9c0a092d8fd3a87d53850c49c527bf10f9",
                          "random_bit": true,
                          "accumulated_seed": "ac979f51525cfd979b14aa7dc0737c5154eabe0db9280eceaa8dc8d2905b20d5",
                          "era_end": {
                            "era_report": {
                              "equivocators": [
                                "013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29"
                              ],
                              "rewards": [],
                              "inactive_validators": [
                                "018139770ea87d175f56a35466c34c7ecccb8d8a91b4ee37a25df60f5b8fc9b394"
                              ]
                            },
                            "next_era_validator_weights": [
                              {
                                "validator": "013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29",
                                "weight": "123"
                              },
                              {
                                "validator": "016e7a1cdd29b0b78fd13af4c5598feff4ef2a97166e3ca6f2e4fbfccd80505bf1",
                                "weight": "456"
                              },
                              {
                                "validator": "018a875fff1eb38451577acd5afee405456568dd7c89e090863a0557bc7af49f17",
                                "weight": "789"
                              }
                            ]
                          },
                          "timestamp": "2020-11-17T00:39:24.072Z",
                          "era_id": 1,
                          "height": 10,
                          "protocol_version": "1.0.0"
                        },
                        "body": {
                          "proposer": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                          "deploy_hashes": [
                            "1414141414141414141414141414141414141414141414141414141414141414"
                          ],
                          "transfer_hashes": [
                            "1515151515151515151515151515151515151515151515151515151515151515"
                          ]
                        }
                      }
                    },
                    "proofs": [
                      {
                        "public_key": "01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c",
                        "signature": "01e0141a10db26fe0880f6fc836a2dd8dd60089eb065790f6437f4827e8dd4995ea8c87ef62c1c99cc311bbf4284ddd28b861637006b75e7e29844c63aae64e10f"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        {
          "name": "chain_get_block_transfers",
          "summary": "returns all transfers for a Block from the network",
          "params": [
            {
              "name": "block_identifier",
              "schema": {
                "description": "The block hash.",
                "$ref": "#/components/schemas/BlockIdentifier"
              },
              "required": false
            }
          ],
          "result": {
            "name": "chain_get_block_transfers_result",
            "schema": {
              "description": "Result for \"chain_get_block_transfers\" RPC response.",
              "type": "object",
              "required": [
                "api_version"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "block_hash": {
                  "description": "The block hash, if found.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/BlockHash"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "transfers": {
                  "description": "The block's transfers, if found.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/components/schemas/Transfer"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "chain_get_block_transfers_example",
              "params": [
                {
                  "name": "block_identifier",
                  "value": {
                    "Hash": "0707070707070707070707070707070707070707070707070707070707070707"
                  }
                }
              ],
              "result": {
                "name": "chain_get_block_transfers_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "block_hash": "0707070707070707070707070707070707070707070707070707070707070707",
                  "transfers": [
                    {
                      "deploy_hash": "0000000000000000000000000000000000000000000000000000000000000000",
                      "from": "account-hash-0000000000000000000000000000000000000000000000000000000000000000",
                      "to": null,
                      "source": "uref-0000000000000000000000000000000000000000000000000000000000000000-000",
                      "target": "uref-0000000000000000000000000000000000000000000000000000000000000000-000",
                      "amount": "0",
                      "gas": "0",
                      "id": null
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "chain_get_state_root_hash",
          "summary": "returns a state root hash at a given Block",
          "params": [
            {
              "name": "block_identifier",
              "schema": {
                "description": "The block hash.",
                "$ref": "#/components/schemas/BlockIdentifier"
              },
              "required": false
            }
          ],
          "result": {
            "name": "chain_get_state_root_hash_result",
            "schema": {
              "description": "Result for \"chain_get_state_root_hash\" RPC response.",
              "type": "object",
              "required": [
                "api_version"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "state_root_hash": {
                  "description": "Hex-encoded hash of the state root.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Digest"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "chain_get_state_root_hash_example",
              "params": [
                {
                  "name": "block_identifier",
                  "value": {
                    "Height": 10
                  }
                }
              ],
              "result": {
                "name": "chain_get_state_root_hash_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "state_root_hash": "0808080808080808080808080808080808080808080808080808080808080808"
                }
              }
            }
          ]
        },
        {
          "name": "state_get_item",
          "summary": "returns a stored value from the network. This RPC is deprecated, use `query_global_state` instead.",
          "params": [
            {
              "name": "state_root_hash",
              "schema": {
                "description": "Hash of the state root.",
                "$ref": "#/components/schemas/Digest"
              },
              "required": true
            },
            {
              "name": "key",
              "schema": {
                "description": "The key under which to query.",
                "$ref": "#/components/schemas/Key"
              },
              "required": true
            },
            {
              "name": "path",
              "schema": {
                "description": "The path components starting from the key as base.",
                "default": [],
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "required": false
            }
          ],
          "result": {
            "name": "state_get_item_result",
            "schema": {
              "description": "Result for \"state_get_item\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "merkle_proof",
                "stored_value"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "stored_value": {
                  "description": "The stored value.",
                  "$ref": "#/components/schemas/StoredValue"
                },
                "merkle_proof": {
                  "description": "The Merkle proof.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "state_get_item_example",
              "params": [
                {
                  "name": "state_root_hash",
                  "value": "0808080808080808080808080808080808080808080808080808080808080808"
                },
                {
                  "name": "key",
                  "value": "deploy-af684263911154d26fa05be9963171802801a0b6aff8f199b7391eacb8edc9e1"
                },
                {
                  "name": "path",
                  "value": [
                    "inner"
                  ]
                }
              ],
              "result": {
                "name": "state_get_item_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "stored_value": {
                    "CLValue": {
                      "cl_type": "U64",
                      "bytes": "0100000000000000",
                      "parsed": 1
                    }
                  },
                  "merkle_proof": "01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3"
                }
              }
            }
          ]
        },
        {
          "name": "state_get_balance",
          "summary": "returns a purse's balance from the network",
          "params": [
            {
              "name": "state_root_hash",
              "schema": {
                "description": "The hash of state root.",
                "$ref": "#/components/schemas/Digest"
              },
              "required": true
            },
            {
              "name": "purse_uref",
              "schema": {
                "description": "Formatted URef.",
                "type": "string"
              },
              "required": true
            }
          ],
          "result": {
            "name": "state_get_balance_result",
            "schema": {
              "description": "Result for \"state_get_balance\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "balance_value",
                "merkle_proof"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "balance_value": {
                  "description": "The balance value.",
                  "$ref": "#/components/schemas/U512"
                },
                "merkle_proof": {
                  "description": "The Merkle proof.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "state_get_balance_example",
              "params": [
                {
                  "name": "state_root_hash",
                  "value": "0808080808080808080808080808080808080808080808080808080808080808"
                },
                {
                  "name": "purse_uref",
                  "value": "uref-09480c3248ef76b603d386f3f4f8a5f87f597d4eaffd475433f861af187ab5db-007"
                }
              ],
              "result": {
                "name": "state_get_balance_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "balance_value": "123456",
                  "merkle_proof": "01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3"
                }
              }
            }
          ]
        },
        {
          "name": "chain_get_era_info_by_switch_block",
          "summary": "returns an EraInfo from the network",
          "params": [
            {
              "name": "block_identifier",
              "schema": {
                "description": "The block identifier.",
                "$ref": "#/components/schemas/BlockIdentifier"
              },
              "required": false
            }
          ],
          "result": {
            "name": "chain_get_era_info_by_switch_block_result",
            "schema": {
              "description": "Result for \"chain_get_era_info\" RPC response.",
              "type": "object",
              "required": [
                "api_version"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "era_summary": {
                  "description": "The era summary.",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/EraSummary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "chain_get_era_info_by_switch_block_example",
              "params": [
                {
                  "name": "block_identifier",
                  "value": {
                    "Hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28"
                  }
                }
              ],
              "result": {
                "name": "chain_get_era_info_by_switch_block_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "era_summary": {
                    "block_hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28",
                    "era_id": 42,
                    "stored_value": {
                      "EraInfo": {
                        "seigniorage_allocations": [
                          {
                            "Delegator": {
                              "delegator_public_key": "01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18",
                              "validator_public_key": "012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876",
                              "amount": "1000"
                            }
                          },
                          {
                            "Validator": {
                              "validator_public_key": "012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876",
                              "amount": "2000"
                            }
                          }
                        ]
                      }
                    },
                    "state_root_hash": "0808080808080808080808080808080808080808080808080808080808080808",
                    "merkle_proof": "01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "state_get_auction_info",
          "summary": "returns the bids and validators as of either a specific block (by height or hash), or the most recently added block",
          "params": [
            {
              "name": "block_identifier",
              "schema": {
                "description": "The block identifier.",
                "$ref": "#/components/schemas/BlockIdentifier"
              },
              "required": false
            }
          ],
          "result": {
            "name": "state_get_auction_info_result",
            "schema": {
              "description": "Result for \"state_get_auction_info\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "auction_state"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "auction_state": {
                  "description": "The auction state.",
                  "$ref": "#/components/schemas/AuctionState"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "state_get_auction_info_example",
              "params": [
                {
                  "name": "block_identifier",
                  "value": {
                    "Hash": "0707070707070707070707070707070707070707070707070707070707070707"
                  }
                }
              ],
              "result": {
                "name": "state_get_auction_info_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "auction_state": {
                    "state_root_hash": "0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b",
                    "block_height": 10,
                    "era_validators": [
                      {
                        "era_id": 10,
                        "validator_weights": [
                          {
                            "public_key": "01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61",
                            "weight": "10"
                          }
                        ]
                      }
                    ],
                    "bids": [
                      {
                        "public_key": "01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61",
                        "bid": {
                          "validator_public_key": "01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61",
                          "bonding_purse": "uref-fafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafa-007",
                          "staked_amount": "20",
                          "delegation_rate": 0,
                          "vesting_schedule": null,
                          "delegators": [
                            {
                              "delegator_public_key": "014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff",
                              "delegator": {
                                "delegator_public_key": "014508a07aa941707f3eb2db94c8897a80b2c1197476b6de213ac273df7d86c4ff",
                                "staked_amount": "10",
                                "bonding_purse": "uref-fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb-007",
                                "validator_public_key": "01197f6b23e16c8532c6abc838facd5ea789be0c76b2920334039bfa8b3d368d61",
                                "vesting_schedule": null
                              }
                            }
                          ],
                          "inactive": false
                        }
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        {
          "name": "chain_get_era_summary",
          "summary": "returns the era summary at either a specific block (by height or hash), or the most recently added block",
          "params": [
            {
              "name": "block_identifier",
              "schema": {
                "description": "The block identifier.",
                "$ref": "#/components/schemas/BlockIdentifier"
              },
              "required": false
            }
          ],
          "result": {
            "name": "chain_get_era_summary_result",
            "schema": {
              "description": "Result for \"chain_get_era_summary\" RPC response.",
              "type": "object",
              "required": [
                "api_version",
                "era_summary"
              ],
              "properties": {
                "api_version": {
                  "description": "The RPC API version.",
                  "type": "string"
                },
                "era_summary": {
                  "description": "The era summary.",
                  "$ref": "#/components/schemas/EraSummary"
                }
              },
              "additionalProperties": false
            }
          },
          "examples": [
            {
              "name": "chain_get_era_summary_example",
              "params": [
                {
                  "name": "block_identifier",
                  "value": {
                    "Hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28"
                  }
                }
              ],
              "result": {
                "name": "chain_get_era_summary_example_result",
                "value": {
                  "api_version": "1.5.2",
                  "era_summary": {
                    "block_hash": "ca92fbeeb369f219189bad8f59bd2eca12ad569dcd36beed1d1c0e825d7ede28",
                    "era_id": 42,
                    "stored_value": {
                      "EraInfo": {
                        "seigniorage_allocations": [
                          {
                            "Delegator": {
                              "delegator_public_key": "01e1b46a25baa8a5c28beb3c9cfb79b572effa04076f00befa57eb70b016153f18",
                              "validator_public_key": "012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876",
                              "amount": "1000"
                            }
                          },
                          {
                            "Validator": {
                              "validator_public_key": "012a1732addc639ea43a89e25d3ad912e40232156dcaa4b9edfc709f43d2fb0876",
                              "amount": "2000"
                            }
                          }
                        ]
                      }
                    },
                    "state_root_hash": "0808080808080808080808080808080808080808080808080808080808080808",
                    "merkle_proof": "01000000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625016ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a72536147614625000000003529cde5c621f857f75f3810611eb4af3f998caaa9d4a3413cf799f99c67db0307010000006ef2e0949ac76e55812421f755abe129b6244fe7168b77f47a7253614761462501010102000000006e06000000000074769d28aac597a36a03a932d4b43e4f10bf0403ee5c41dd035102553f5773631200b9e173e8f05361b681513c14e25e3138639eb03232581db7557c9e8dbbc83ce94500226a9a7fe4f2b7b88d5103a4fc7400f02bf89c860c9ccdd56951a2afe9be0e0267006d820fb5676eb2960e15722f7725f3f8f41030078f8b2e44bf0dc03f71b176d6e800dc5ae9805068c5be6da1a90b2528ee85db0609cc0fb4bd60bbd559f497a98b67f500e1e3e846592f4918234647fca39830b7e1e6ad6f5b7a99b39af823d82ba1873d000003000000010186ff500f287e9b53f823ae1582b1fa429dfede28015125fd233a31ca04d5012002015cc42669a55467a1fdf49750772bfc1aed59b9b085558eb81510e9b015a7c83b0301e3cf4a34b1db6bfa58808b686cb8fe21ebe0c1bcbcee522649d2b135fe510fe3"
                  }
                }
              }
            }
          ]
        }
      ],
      "components": {
        "schemas": {
          "Deploy": {
            "description": "A signed smart contract.",
            "type": "object",
            "required": [
              "approvals",
              "hash",
              "header",
              "payment",
              "session"
            ],
            "properties": {
              "hash": {
                "$ref": "#/components/schemas/DeployHash"
              },
              "header": {
                "$ref": "#/components/schemas/DeployHeader"
              },
              "payment": {
                "$ref": "#/components/schemas/ExecutableDeployItem"
              },
              "session": {
                "$ref": "#/components/schemas/ExecutableDeployItem"
              },
              "approvals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeployApproval"
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          },
          "DeployHash": {
            "description": "Hex-encoded deploy hash.",
            "type": "string"
          },
          "DeployHeader": {
            "description": "The header portion of a [`Deploy`].",
            "type": "object",
            "required": [
              "account",
              "body_hash",
              "chain_name",
              "dependencies",
              "gas_price",
              "timestamp",
              "ttl"
            ],
            "properties": {
              "account": {
                "$ref": "#/components/schemas/PublicKey"
              },
              "timestamp": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "ttl": {
                "$ref": "#/components/schemas/TimeDiff"
              },
              "gas_price": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "body_hash": {
                "$ref": "#/components/schemas/Digest"
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeployHash"
                }
              },
              "chain_name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "PublicKey": {
            "description": "Hex-encoded cryptographic public key, including the algorithm tag prefix.",
            "type": "string"
          },
          "Timestamp": {
            "description": "Timestamp formatted as per RFC 3339",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "TimeDiff": {
            "description": "Human-readable duration.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "Digest": {
            "description": "Hex-encoded hash digest.",
            "type": "string"
          },
          "ExecutableDeployItem": {
            "description": "The executable component of a [`Deploy`].",
            "oneOf": [
              {
                "description": "Executable specified as raw bytes that represent Wasm code and an instance of [`RuntimeArgs`].",
                "type": "object",
                "required": [
                  "ModuleBytes"
                ],
                "properties": {
                  "ModuleBytes": {
                    "type": "object",
                    "required": [
                      "args",
                      "module_bytes"
                    ],
                    "properties": {
                      "module_bytes": {
                        "description": "Hex-encoded raw Wasm bytes.",
                        "type": "string"
                      },
                      "args": {
                        "description": "Runtime arguments.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/RuntimeArgs"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Stored contract referenced by its [`ContractHash`], entry point and an instance of [`RuntimeArgs`].",
                "type": "object",
                "required": [
                  "StoredContractByHash"
                ],
                "properties": {
                  "StoredContractByHash": {
                    "type": "object",
                    "required": [
                      "args",
                      "entry_point",
                      "hash"
                    ],
                    "properties": {
                      "hash": {
                        "description": "Hex-encoded contract hash.",
                        "type": "string"
                      },
                      "entry_point": {
                        "description": "Name of an entry point.",
                        "type": "string"
                      },
                      "args": {
                        "description": "Runtime arguments.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/RuntimeArgs"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].",
                "type": "object",
                "required": [
                  "StoredContractByName"
                ],
                "properties": {
                  "StoredContractByName": {
                    "type": "object",
                    "required": [
                      "args",
                      "entry_point",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Named key.",
                        "type": "string"
                      },
                      "entry_point": {
                        "description": "Name of an entry point.",
                        "type": "string"
                      },
                      "args": {
                        "description": "Runtime arguments.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/RuntimeArgs"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Stored versioned contract referenced by its [`ContractPackageHash`], entry point and an instance of [`RuntimeArgs`].",
                "type": "object",
                "required": [
                  "StoredVersionedContractByHash"
                ],
                "properties": {
                  "StoredVersionedContractByHash": {
                    "type": "object",
                    "required": [
                      "args",
                      "entry_point",
                      "hash"
                    ],
                    "properties": {
                      "hash": {
                        "description": "Hex-encoded contract package hash.",
                        "type": "string"
                      },
                      "version": {
                        "description": "An optional version of the contract to call. It will default to the highest enabled version if no value is specified.",
                        "type": [
                          "integer",
                          "null"
                        ],
                        "format": "uint32",
                        "minimum": 0.0
                      },
                      "entry_point": {
                        "description": "Entry point name.",
                        "type": "string"
                      },
                      "args": {
                        "description": "Runtime arguments.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/RuntimeArgs"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Stored versioned contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].",
                "type": "object",
                "required": [
                  "StoredVersionedContractByName"
                ],
                "properties": {
                  "StoredVersionedContractByName": {
                    "type": "object",
                    "required": [
                      "args",
                      "entry_point",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Named key.",
                        "type": "string"
                      },
                      "version": {
                        "description": "An optional version of the contract to call. It will default to the highest enabled version if no value is specified.",
                        "type": [
                          "integer",
                          "null"
                        ],
                        "format": "uint32",
                        "minimum": 0.0
                      },
                      "entry_point": {
                        "description": "Entry point name.",
                        "type": "string"
                      },
                      "args": {
                        "description": "Runtime arguments.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/RuntimeArgs"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A native transfer which does not contain or reference a Wasm code.",
                "type": "object",
                "required": [
                  "Transfer"
                ],
                "properties": {
                  "Transfer": {
                    "type": "object",
                    "required": [
                      "args"
                    ],
                    "properties": {
                      "args": {
                        "description": "Runtime arguments.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/RuntimeArgs"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "RuntimeArgs": {
            "description": "Represents a collection of arguments passed to a smart contract.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedArg"
            }
          },
          "NamedArg": {
            "description": "Named arguments to a contract.",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/CLValue"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          },
          "CLValue": {
            "description": "A Casper value, i.e. a value which can be stored and manipulated by smart contracts.\n\nIt holds the underlying data as a type-erased, serialized `Vec<u8>` and also holds the CLType of the underlying data as a separate member.\n\nThe `parsed` field, representing the original value, is a convenience only available when a CLValue is encoded to JSON, and can always be set to null if preferred.",
            "type": "object",
            "required": [
              "bytes",
              "cl_type"
            ],
            "properties": {
              "cl_type": {
                "$ref": "#/components/schemas/CLType"
              },
              "bytes": {
                "type": "string"
              },
              "parsed": true
            },
            "additionalProperties": false
          },
          "CLType": {
            "description": "Casper types, i.e. types which can be stored and manipulated by smart contracts.\n\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).",
            "oneOf": [
              {
                "description": "`bool` primitive.",
                "type": "string",
                "enum": [
                  "Bool"
                ]
              },
              {
                "description": "`i32` primitive.",
                "type": "string",
                "enum": [
                  "I32"
                ]
              },
              {
                "description": "`i64` primitive.",
                "type": "string",
                "enum": [
                  "I64"
                ]
              },
              {
                "description": "`u8` primitive.",
                "type": "string",
                "enum": [
                  "U8"
                ]
              },
              {
                "description": "`u32` primitive.",
                "type": "string",
                "enum": [
                  "U32"
                ]
              },
              {
                "description": "`u64` primitive.",
                "type": "string",
                "enum": [
                  "U64"
                ]
              },
              {
                "description": "[`U128`] large unsigned integer type.",
                "type": "string",
                "enum": [
                  "U128"
                ]
              },
              {
                "description": "[`U256`] large unsigned integer type.",
                "type": "string",
                "enum": [
                  "U256"
                ]
              },
              {
                "description": "[`U512`] large unsigned integer type.",
                "type": "string",
                "enum": [
                  "U512"
                ]
              },
              {
                "description": "`()` primitive.",
                "type": "string",
                "enum": [
                  "Unit"
                ]
              },
              {
                "description": "`String` primitive.",
                "type": "string",
                "enum": [
                  "String"
                ]
              },
              {
                "description": "[`Key`] system type.",
                "type": "string",
                "enum": [
                  "Key"
                ]
              },
              {
                "description": "[`URef`] system type.",
                "type": "string",
                "enum": [
                  "URef"
                ]
              },
              {
                "description": "[`PublicKey`](crate::PublicKey) system type.",
                "type": "string",
                "enum": [
                  "PublicKey"
                ]
              },
              {
                "description": "`Option` of a `CLType`.",
                "type": "object",
                "required": [
                  "Option"
                ],
                "properties": {
                  "Option": {
                    "$ref": "#/components/schemas/CLType"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Variable-length list of a single `CLType` (comparable to a `Vec`).",
                "type": "object",
                "required": [
                  "List"
                ],
                "properties": {
                  "List": {
                    "$ref": "#/components/schemas/CLType"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Fixed-length list of a single `CLType` (comparable to a Rust array).",
                "type": "object",
                "required": [
                  "ByteArray"
                ],
                "properties": {
                  "ByteArray": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "`Result` with `Ok` and `Err` variants of `CLType`s.",
                "type": "object",
                "required": [
                  "Result"
                ],
                "properties": {
                  "Result": {
                    "type": "object",
                    "required": [
                      "err",
                      "ok"
                    ],
                    "properties": {
                      "ok": {
                        "$ref": "#/components/schemas/CLType"
                      },
                      "err": {
                        "$ref": "#/components/schemas/CLType"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Map with keys of a single `CLType` and values of a single `CLType`.",
                "type": "object",
                "required": [
                  "Map"
                ],
                "properties": {
                  "Map": {
                    "type": "object",
                    "required": [
                      "key",
                      "value"
                    ],
                    "properties": {
                      "key": {
                        "$ref": "#/components/schemas/CLType"
                      },
                      "value": {
                        "$ref": "#/components/schemas/CLType"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "1-ary tuple of a `CLType`.",
                "type": "object",
                "required": [
                  "Tuple1"
                ],
                "properties": {
                  "Tuple1": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CLType"
                    },
                    "maxItems": 1,
                    "minItems": 1
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "2-ary tuple of `CLType`s.",
                "type": "object",
                "required": [
                  "Tuple2"
                ],
                "properties": {
                  "Tuple2": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CLType"
                    },
                    "maxItems": 2,
                    "minItems": 2
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "3-ary tuple of `CLType`s.",
                "type": "object",
                "required": [
                  "Tuple3"
                ],
                "properties": {
                  "Tuple3": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CLType"
                    },
                    "maxItems": 3,
                    "minItems": 3
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Unspecified type.",
                "type": "string",
                "enum": [
                  "Any"
                ]
              }
            ]
          },
          "DeployApproval": {
            "description": "A struct containing a signature of a deploy hash and the public key of the signer.",
            "type": "object",
            "required": [
              "signature",
              "signer"
            ],
            "properties": {
              "signer": {
                "$ref": "#/components/schemas/PublicKey"
              },
              "signature": {
                "$ref": "#/components/schemas/Signature"
              }
            },
            "additionalProperties": false
          },
          "Signature": {
            "description": "Hex-encoded cryptographic signature, including the algorithm tag prefix.",
            "type": "string"
          },
          "BlockHash": {
            "description": "Hex-encoded cryptographic hash of a block.",
            "type": "string"
          },
          "ExecutionResult": {
            "description": "The versioned result of executing a single deploy.",
            "oneOf": [
              {
                "description": "Version 1 of execution result type.",
                "type": "object",
                "required": [
                  "Version1"
                ],
                "properties": {
                  "Version1": {
                    "$ref": "#/components/schemas/ExecutionResultV1"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Version 2 of execution result type.",
                "type": "object",
                "required": [
                  "Version2"
                ],
                "properties": {
                  "Version2": {
                    "$ref": "#/components/schemas/ExecutionResultV2"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "ExecutionResultV1": {
            "description": "The result of executing a single deploy.",
            "oneOf": [
              {
                "description": "The result of a failed execution.",
                "type": "object",
                "required": [
                  "Failure"
                ],
                "properties": {
                  "Failure": {
                    "type": "object",
                    "required": [
                      "cost",
                      "effect",
                      "error_message",
                      "transfers"
                    ],
                    "properties": {
                      "effect": {
                        "description": "The effect of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ExecutionEffect"
                          }
                        ]
                      },
                      "transfers": {
                        "description": "A record of Transfers performed while executing the deploy.",
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TransferAddr"
                        }
                      },
                      "cost": {
                        "description": "The cost of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/U512"
                          }
                        ]
                      },
                      "error_message": {
                        "description": "The error message associated with executing the deploy.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "The result of a successful execution.",
                "type": "object",
                "required": [
                  "Success"
                ],
                "properties": {
                  "Success": {
                    "type": "object",
                    "required": [
                      "cost",
                      "effect",
                      "transfers"
                    ],
                    "properties": {
                      "effect": {
                        "description": "The effect of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ExecutionEffect"
                          }
                        ]
                      },
                      "transfers": {
                        "description": "A record of Transfers performed while executing the deploy.",
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TransferAddr"
                        }
                      },
                      "cost": {
                        "description": "The cost of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/U512"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "ExecutionEffect": {
            "description": "The sequence of execution transforms from a single deploy.",
            "type": "object",
            "required": [
              "operations",
              "transforms"
            ],
            "properties": {
              "operations": {
                "description": "The resulting operations.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "transforms": {
                "description": "The sequence of execution transforms.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransformEntry"
                }
              }
            },
            "additionalProperties": false
          },
          "Operation": {
            "description": "An operation performed while executing a deploy.",
            "type": "object",
            "required": [
              "key",
              "kind"
            ],
            "properties": {
              "key": {
                "description": "The formatted string of the `Key`.",
                "type": "string"
              },
              "kind": {
                "description": "The type of operation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OpKind"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "OpKind": {
            "description": "The type of operation performed while executing a deploy.",
            "oneOf": [
              {
                "description": "A read operation.",
                "type": "string",
                "enum": [
                  "Read"
                ]
              },
              {
                "description": "A write operation.",
                "type": "string",
                "enum": [
                  "Write"
                ]
              },
              {
                "description": "An addition.",
                "type": "string",
                "enum": [
                  "Add"
                ]
              },
              {
                "description": "An operation which has no effect.",
                "type": "string",
                "enum": [
                  "NoOp"
                ]
              },
              {
                "description": "A prune operation.",
                "type": "string",
                "enum": [
                  "Prune"
                ]
              }
            ]
          },
          "TransformEntry": {
            "description": "A transformation performed while executing a deploy.",
            "type": "object",
            "required": [
              "key",
              "transform"
            ],
            "properties": {
              "key": {
                "description": "The formatted string of the `Key`.",
                "type": "string"
              },
              "transform": {
                "description": "The transformation.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Transform"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "Transform": {
            "description": "The actual transformation performed while executing a deploy.",
            "oneOf": [
              {
                "description": "A transform having no effect.",
                "type": "string",
                "enum": [
                  "Identity"
                ]
              },
              {
                "description": "Writes the given CLValue to global state.",
                "type": "object",
                "required": [
                  "WriteCLValue"
                ],
                "properties": {
                  "WriteCLValue": {
                    "$ref": "#/components/schemas/CLValue"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the given Account to global state.",
                "type": "object",
                "required": [
                  "WriteAccount"
                ],
                "properties": {
                  "WriteAccount": {
                    "$ref": "#/components/schemas/AccountHash"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes a smart contract as Wasm to global state.",
                "type": "string",
                "enum": [
                  "WriteContractWasm"
                ]
              },
              {
                "description": "Writes a smart contract to global state.",
                "type": "string",
                "enum": [
                  "WriteContract"
                ]
              },
              {
                "description": "Writes a smart contract package to global state.",
                "type": "string",
                "enum": [
                  "WriteContractPackage"
                ]
              },
              {
                "description": "Writes the given DeployInfo to global state.",
                "type": "object",
                "required": [
                  "WriteDeployInfo"
                ],
                "properties": {
                  "WriteDeployInfo": {
                    "$ref": "#/components/schemas/DeployInfo"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the given EraInfo to global state.",
                "type": "object",
                "required": [
                  "WriteEraInfo"
                ],
                "properties": {
                  "WriteEraInfo": {
                    "$ref": "#/components/schemas/EraInfo"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the given Transfer to global state.",
                "type": "object",
                "required": [
                  "WriteTransfer"
                ],
                "properties": {
                  "WriteTransfer": {
                    "$ref": "#/components/schemas/Transfer"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the given Bid to global state.",
                "type": "object",
                "required": [
                  "WriteBid"
                ],
                "properties": {
                  "WriteBid": {
                    "$ref": "#/components/schemas/Bid"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the given Withdraw to global state.",
                "type": "object",
                "required": [
                  "WriteWithdraw"
                ],
                "properties": {
                  "WriteWithdraw": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WithdrawPurse"
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Adds the given `i32`.",
                "type": "object",
                "required": [
                  "AddInt32"
                ],
                "properties": {
                  "AddInt32": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Adds the given `u64`.",
                "type": "object",
                "required": [
                  "AddUInt64"
                ],
                "properties": {
                  "AddUInt64": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Adds the given `U128`.",
                "type": "object",
                "required": [
                  "AddUInt128"
                ],
                "properties": {
                  "AddUInt128": {
                    "$ref": "#/components/schemas/U128"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Adds the given `U256`.",
                "type": "object",
                "required": [
                  "AddUInt256"
                ],
                "properties": {
                  "AddUInt256": {
                    "$ref": "#/components/schemas/U256"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Adds the given `U512`.",
                "type": "object",
                "required": [
                  "AddUInt512"
                ],
                "properties": {
                  "AddUInt512": {
                    "$ref": "#/components/schemas/U512"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Adds the given collection of named keys.",
                "type": "object",
                "required": [
                  "AddKeys"
                ],
                "properties": {
                  "AddKeys": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NamedKey"
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A failed transformation, containing an error message.",
                "type": "object",
                "required": [
                  "Failure"
                ],
                "properties": {
                  "Failure": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the given Unbonding to global state.",
                "type": "object",
                "required": [
                  "WriteUnbonding"
                ],
                "properties": {
                  "WriteUnbonding": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnbondingPurse"
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the addressable entity to global state.",
                "type": "string",
                "enum": [
                  "WriteAddressableEntity"
                ]
              },
              {
                "description": "Removes pathing to keyed value within global state. This is a form of soft delete; the underlying value remains in global state and is reachable from older global state root hashes where it was included in the hash up.",
                "type": "object",
                "required": [
                  "Prune"
                ],
                "properties": {
                  "Prune": {
                    "$ref": "#/components/schemas/Key"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Writes the given BidKind to global state.",
                "type": "object",
                "required": [
                  "WriteBidKind"
                ],
                "properties": {
                  "WriteBidKind": {
                    "$ref": "#/components/schemas/BidKind"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "AccountHash": {
            "description": "Account hash as a formatted string.",
            "type": "string"
          },
          "DeployInfo": {
            "description": "Information relating to the given Deploy.",
            "type": "object",
            "required": [
              "deploy_hash",
              "from",
              "gas",
              "source",
              "transfers"
            ],
            "properties": {
              "deploy_hash": {
                "description": "Hex-encoded Deploy hash.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeployHash"
                  }
                ]
              },
              "transfers": {
                "description": "Transfers performed by the Deploy.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransferAddr"
                }
              },
              "from": {
                "description": "Account identifier of the creator of the Deploy.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountHash"
                  }
                ]
              },
              "source": {
                "description": "Source purse used for payment of the Deploy.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "gas": {
                "description": "Gas cost of executing the Deploy.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "TransferAddr": {
            "description": "Hex-encoded transfer address.",
            "type": "string"
          },
          "URef": {
            "description": "Hex-encoded, formatted URef.",
            "type": "string"
          },
          "U512": {
            "description": "Decimal representation of a 512-bit integer.",
            "type": "string"
          },
          "EraInfo": {
            "description": "Auction metadata.  Intended to be recorded at each era.",
            "type": "object",
            "required": [
              "seigniorage_allocations"
            ],
            "properties": {
              "seigniorage_allocations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SeigniorageAllocation"
                }
              }
            },
            "additionalProperties": false
          },
          "SeigniorageAllocation": {
            "description": "Information about a seigniorage allocation",
            "oneOf": [
              {
                "description": "Info about a seigniorage allocation for a validator",
                "type": "object",
                "required": [
                  "Validator"
                ],
                "properties": {
                  "Validator": {
                    "type": "object",
                    "required": [
                      "amount",
                      "validator_public_key"
                    ],
                    "properties": {
                      "validator_public_key": {
                        "description": "Validator's public key",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/PublicKey"
                          }
                        ]
                      },
                      "amount": {
                        "description": "Allocated amount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/U512"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Info about a seigniorage allocation for a delegator",
                "type": "object",
                "required": [
                  "Delegator"
                ],
                "properties": {
                  "Delegator": {
                    "type": "object",
                    "required": [
                      "amount",
                      "delegator_public_key",
                      "validator_public_key"
                    ],
                    "properties": {
                      "delegator_public_key": {
                        "description": "Delegator's public key",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/PublicKey"
                          }
                        ]
                      },
                      "validator_public_key": {
                        "description": "Validator's public key",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/PublicKey"
                          }
                        ]
                      },
                      "amount": {
                        "description": "Allocated amount",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/U512"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "Transfer": {
            "description": "Represents a transfer from one purse to another",
            "type": "object",
            "required": [
              "amount",
              "deploy_hash",
              "from",
              "gas",
              "source",
              "target"
            ],
            "properties": {
              "deploy_hash": {
                "description": "Hex-encoded Deploy hash of Deploy that created the transfer.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeployHash"
                  }
                ]
              },
              "from": {
                "description": "Account from which transfer was executed",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountHash"
                  }
                ]
              },
              "to": {
                "description": "Account to which funds are transferred",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AccountHash"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "source": {
                "description": "Source purse",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "target": {
                "description": "Target purse",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "amount": {
                "description": "Transfer amount",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              },
              "gas": {
                "description": "Gas",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              },
              "id": {
                "description": "User-defined id",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          "Bid": {
            "description": "An entry in the validator map.",
            "type": "object",
            "required": [
              "bonding_purse",
              "delegation_rate",
              "delegators",
              "inactive",
              "staked_amount",
              "validator_public_key"
            ],
            "properties": {
              "validator_public_key": {
                "description": "Validator public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "bonding_purse": {
                "description": "The purse that was used for bonding.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "staked_amount": {
                "description": "The amount of tokens staked by a validator (not including delegators).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              },
              "delegation_rate": {
                "description": "Delegation rate.",
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "vesting_schedule": {
                "description": "Vesting schedule for a genesis validator. `None` if non-genesis validator.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/VestingSchedule"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "delegators": {
                "description": "This validator's delegators, indexed by their public keys.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Array_of_PublicKeyAndDelegator"
                  }
                ]
              },
              "inactive": {
                "description": "`true` if validator has been \"evicted\".",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "VestingSchedule": {
            "type": "object",
            "required": [
              "initial_release_timestamp_millis"
            ],
            "properties": {
              "initial_release_timestamp_millis": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "locked_amounts": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/U512"
                },
                "maxItems": 14,
                "minItems": 14
              }
            },
            "additionalProperties": false
          },
          "Array_of_PublicKeyAndDelegator": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKeyAndDelegator"
            }
          },
          "PublicKeyAndDelegator": {
            "description": "A delegator associated with the given validator.",
            "type": "object",
            "required": [
              "delegator",
              "delegator_public_key"
            ],
            "properties": {
              "delegator_public_key": {
                "description": "The public key of the delegator.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "delegator": {
                "description": "The delegator details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Delegator"
                  }
                ]
              }
            }
          },
          "Delegator": {
            "description": "Represents a party delegating their stake to a validator (or \"delegatee\")",
            "type": "object",
            "required": [
              "bonding_purse",
              "delegator_public_key",
              "staked_amount",
              "validator_public_key"
            ],
            "properties": {
              "delegator_public_key": {
                "$ref": "#/components/schemas/PublicKey"
              },
              "staked_amount": {
                "$ref": "#/components/schemas/U512"
              },
              "bonding_purse": {
                "$ref": "#/components/schemas/URef"
              },
              "validator_public_key": {
                "$ref": "#/components/schemas/PublicKey"
              },
              "vesting_schedule": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/VestingSchedule"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "WithdrawPurse": {
            "description": "A withdraw purse, a legacy structure.",
            "type": "object",
            "required": [
              "amount",
              "bonding_purse",
              "era_of_creation",
              "unbonder_public_key",
              "validator_public_key"
            ],
            "properties": {
              "bonding_purse": {
                "description": "Bonding Purse",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "validator_public_key": {
                "description": "Validators public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "unbonder_public_key": {
                "description": "Unbonders public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "era_of_creation": {
                "description": "Era in which this unbonding request was created.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EraId"
                  }
                ]
              },
              "amount": {
                "description": "Unbonding Amount.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "EraId": {
            "description": "Era ID newtype.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "U128": {
            "description": "Decimal representation of a 128-bit integer.",
            "type": "string"
          },
          "U256": {
            "description": "Decimal representation of a 256-bit integer.",
            "type": "string"
          },
          "NamedKey": {
            "description": "A key with a name.",
            "type": "object",
            "required": [
              "key",
              "name"
            ],
            "properties": {
              "name": {
                "description": "The name of the entry.",
                "type": "string"
              },
              "key": {
                "description": "The value of the entry: a casper `Key` type.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "UnbondingPurse": {
            "description": "Unbonding purse.",
            "type": "object",
            "required": [
              "amount",
              "bonding_purse",
              "era_of_creation",
              "unbonder_public_key",
              "validator_public_key"
            ],
            "properties": {
              "bonding_purse": {
                "description": "Bonding Purse",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "validator_public_key": {
                "description": "Validators public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "unbonder_public_key": {
                "description": "Unbonders public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "era_of_creation": {
                "description": "Era in which this unbonding request was created.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EraId"
                  }
                ]
              },
              "amount": {
                "description": "Unbonding Amount.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              },
              "new_validator": {
                "description": "The validator public key to re-delegate to.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "Key": {
            "description": "The key as a formatted string, under which data (e.g. `CLValue`s, smart contracts, user accounts) are stored in global state.",
            "type": "string"
          },
          "BidKind": {
            "description": "Auction bid variants.",
            "oneOf": [
              {
                "description": "A unified record indexed on validator data, with an embedded collection of all delegator bids assigned to that validator. The Unified variant is for legacy retrograde support, new instances will not be created going forward.",
                "type": "object",
                "required": [
                  "Unified"
                ],
                "properties": {
                  "Unified": {
                    "$ref": "#/components/schemas/Bid"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A bid record containing only validator data.",
                "type": "object",
                "required": [
                  "Validator"
                ],
                "properties": {
                  "Validator": {
                    "$ref": "#/components/schemas/ValidatorBid"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A bid record containing only delegator data.",
                "type": "object",
                "required": [
                  "Delegator"
                ],
                "properties": {
                  "Delegator": {
                    "$ref": "#/components/schemas/Delegator"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "ValidatorBid": {
            "description": "An entry in the validator map.",
            "type": "object",
            "required": [
              "bonding_purse",
              "delegation_rate",
              "inactive",
              "staked_amount",
              "validator_public_key"
            ],
            "properties": {
              "validator_public_key": {
                "description": "Validator public key",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "bonding_purse": {
                "description": "The purse that was used for bonding.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "staked_amount": {
                "description": "The amount of tokens staked by a validator (not including delegators).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              },
              "delegation_rate": {
                "description": "Delegation rate",
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "vesting_schedule": {
                "description": "Vesting schedule for a genesis validator. `None` if non-genesis validator.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/VestingSchedule"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inactive": {
                "description": "`true` if validator has been \"evicted\"",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "ExecutionResultV2": {
            "description": "The result of executing a single deploy.",
            "oneOf": [
              {
                "description": "The result of a failed execution.",
                "type": "object",
                "required": [
                  "Failure"
                ],
                "properties": {
                  "Failure": {
                    "type": "object",
                    "required": [
                      "cost",
                      "effects",
                      "error_message",
                      "transfers"
                    ],
                    "properties": {
                      "effects": {
                        "description": "The effects of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Effects"
                          }
                        ]
                      },
                      "transfers": {
                        "description": "A record of transfers performed while executing the deploy.",
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TransferAddr"
                        }
                      },
                      "cost": {
                        "description": "The cost in Motes of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/U512"
                          }
                        ]
                      },
                      "error_message": {
                        "description": "The error message associated with executing the deploy.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "The result of a successful execution.",
                "type": "object",
                "required": [
                  "Success"
                ],
                "properties": {
                  "Success": {
                    "type": "object",
                    "required": [
                      "cost",
                      "effects",
                      "transfers"
                    ],
                    "properties": {
                      "effects": {
                        "description": "The effects of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Effects"
                          }
                        ]
                      },
                      "transfers": {
                        "description": "A record of transfers performed while executing the deploy.",
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TransferAddr"
                        }
                      },
                      "cost": {
                        "description": "The cost in Motes of executing the deploy.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/U512"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "Effects": {
            "description": "A log of all transforms produced during execution.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transform"
            }
          },
          "AccountIdentifier": {
            "description": "Identifier of an account.",
            "anyOf": [
              {
                "description": "The public key of an account",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              {
                "description": "The account hash of an account",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountHash"
                  }
                ]
              }
            ]
          },
          "BlockIdentifier": {
            "description": "Identifier for possible ways to retrieve a block.",
            "oneOf": [
              {
                "description": "Identify and retrieve the block with its hash.",
                "type": "object",
                "required": [
                  "Hash"
                ],
                "properties": {
                  "Hash": {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Identify and retrieve the block with its height.",
                "type": "object",
                "required": [
                  "Height"
                ],
                "properties": {
                  "Height": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "Account": {
            "description": "Represents an Account in the global state.",
            "type": "object",
            "required": [
              "account_hash",
              "action_thresholds",
              "associated_keys",
              "main_purse",
              "named_keys"
            ],
            "properties": {
              "account_hash": {
                "$ref": "#/components/schemas/AccountHash"
              },
              "named_keys": {
                "$ref": "#/components/schemas/NamedKeys"
              },
              "main_purse": {
                "$ref": "#/components/schemas/URef"
              },
              "associated_keys": {
                "$ref": "#/components/schemas/AssociatedKeys"
              },
              "action_thresholds": {
                "$ref": "#/components/schemas/ActionThresholds"
              }
            },
            "additionalProperties": false
          },
          "NamedKeys": {
            "description": "A collection of named keys.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Array_of_NamedKey"
              }
            ]
          },
          "Array_of_NamedKey": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedKey"
            }
          },
          "AssociatedKeys": {
            "description": "A collection of weighted public keys (represented as account hashes) associated with an account.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Array_of_AssociatedKey"
              }
            ]
          },
          "Array_of_AssociatedKey": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedKey"
            }
          },
          "AssociatedKey": {
            "description": "A weighted public key.",
            "type": "object",
            "required": [
              "account_hash",
              "weight"
            ],
            "properties": {
              "account_hash": {
                "description": "The account hash of the public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountHash"
                  }
                ]
              },
              "weight": {
                "description": "The weight assigned to the public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Weight"
                  }
                ]
              }
            }
          },
          "Weight": {
            "description": "The weight associated with public keys in an account's associated keys.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "ActionThresholds": {
            "description": "Thresholds that have to be met when executing an action of a certain type.",
            "type": "object",
            "required": [
              "deployment",
              "key_management"
            ],
            "properties": {
              "deployment": {
                "description": "Threshold for deploy execution.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Weight"
                  }
                ]
              },
              "key_management": {
                "description": "Threshold for managing action threshold.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Weight"
                  }
                ]
              }
            }
          },
          "DictionaryIdentifier": {
            "description": "Options for dictionary item lookups.",
            "oneOf": [
              {
                "description": "Lookup a dictionary item via an Account's named keys.",
                "type": "object",
                "required": [
                  "AccountNamedKey"
                ],
                "properties": {
                  "AccountNamedKey": {
                    "type": "object",
                    "required": [
                      "dictionary_item_key",
                      "dictionary_name",
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "description": "The account key as a formatted string whose named keys contains dictionary_name.",
                        "type": "string"
                      },
                      "dictionary_name": {
                        "description": "The named key under which the dictionary seed URef is stored.",
                        "type": "string"
                      },
                      "dictionary_item_key": {
                        "description": "The dictionary item key formatted as a string.",
                        "type": "string"
                      }
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Lookup a dictionary item via a Contract's named keys.",
                "type": "object",
                "required": [
                  "ContractNamedKey"
                ],
                "properties": {
                  "ContractNamedKey": {
                    "type": "object",
                    "required": [
                      "dictionary_item_key",
                      "dictionary_name",
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "description": "The contract key as a formatted string whose named keys contains dictionary_name.",
                        "type": "string"
                      },
                      "dictionary_name": {
                        "description": "The named key under which the dictionary seed URef is stored.",
                        "type": "string"
                      },
                      "dictionary_item_key": {
                        "description": "The dictionary item key formatted as a string.",
                        "type": "string"
                      }
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Lookup a dictionary item via its seed URef.",
                "type": "object",
                "required": [
                  "URef"
                ],
                "properties": {
                  "URef": {
                    "type": "object",
                    "required": [
                      "dictionary_item_key",
                      "seed_uref"
                    ],
                    "properties": {
                      "seed_uref": {
                        "description": "The dictionary's seed URef.",
                        "type": "string"
                      },
                      "dictionary_item_key": {
                        "description": "The dictionary item key formatted as a string.",
                        "type": "string"
                      }
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Lookup a dictionary item via its unique key.",
                "type": "object",
                "required": [
                  "Dictionary"
                ],
                "properties": {
                  "Dictionary": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "StoredValue": {
            "description": "A value stored in Global State.",
            "oneOf": [
              {
                "description": "A CLValue.",
                "type": "object",
                "required": [
                  "CLValue"
                ],
                "properties": {
                  "CLValue": {
                    "$ref": "#/components/schemas/CLValue"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "An account.",
                "type": "object",
                "required": [
                  "Account"
                ],
                "properties": {
                  "Account": {
                    "$ref": "#/components/schemas/Account"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A contract Wasm.",
                "type": "object",
                "required": [
                  "ContractWasm"
                ],
                "properties": {
                  "ContractWasm": {
                    "$ref": "#/components/schemas/ContractWasm"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A contract.",
                "type": "object",
                "required": [
                  "Contract"
                ],
                "properties": {
                  "Contract": {
                    "$ref": "#/components/schemas/Contract"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A `Package`.",
                "type": "object",
                "required": [
                  "ContractPackage"
                ],
                "properties": {
                  "ContractPackage": {
                    "$ref": "#/components/schemas/Package"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "A `Transfer`.",
                "type": "object",
                "required": [
                  "Transfer"
                ],
                "properties": {
                  "Transfer": {
                    "$ref": "#/components/schemas/Transfer"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Info about a deploy.",
                "type": "object",
                "required": [
                  "DeployInfo"
                ],
                "properties": {
                  "DeployInfo": {
                    "$ref": "#/components/schemas/DeployInfo"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Info about an era.",
                "type": "object",
                "required": [
                  "EraInfo"
                ],
                "properties": {
                  "EraInfo": {
                    "$ref": "#/components/schemas/EraInfo"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Variant that stores [`Bid`].",
                "type": "object",
                "required": [
                  "Bid"
                ],
                "properties": {
                  "Bid": {
                    "$ref": "#/components/schemas/Bid"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Variant that stores withdraw information.",
                "type": "object",
                "required": [
                  "Withdraw"
                ],
                "properties": {
                  "Withdraw": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WithdrawPurse"
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Unbonding information.",
                "type": "object",
                "required": [
                  "Unbonding"
                ],
                "properties": {
                  "Unbonding": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnbondingPurse"
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "An `AddressableEntity`.",
                "type": "object",
                "required": [
                  "AddressableEntity"
                ],
                "properties": {
                  "AddressableEntity": {
                    "$ref": "#/components/schemas/AddressableEntity"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Variant that stores [`BidKind`].",
                "type": "object",
                "required": [
                  "BidKind"
                ],
                "properties": {
                  "BidKind": {
                    "$ref": "#/components/schemas/BidKind"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Variant that stores a [`Context`] and a [`Lifetime`] of the [`crate::URef`].",
                "type": "object",
                "required": [
                  "URef"
                ],
                "properties": {
                  "URef": {
                    "type": "array",
                    "items": [
                      {
                        "$ref": "#/components/schemas/Context"
                      },
                      {
                        "$ref": "#/components/schemas/Lifetime"
                      }
                    ],
                    "maxItems": 2,
                    "minItems": 2
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "ContractWasm": {
            "description": "A container for contract's WASM bytes.",
            "type": "object",
            "required": [
              "bytes"
            ],
            "properties": {
              "bytes": {
                "$ref": "#/components/schemas/Bytes"
              }
            }
          },
          "Bytes": {
            "description": "Hex-encoded bytes.",
            "type": "string"
          },
          "Contract": {
            "description": "Methods and type signatures supported by a contract.",
            "type": "object",
            "required": [
              "contract_package_hash",
              "contract_wasm_hash",
              "entry_points",
              "named_keys",
              "protocol_version"
            ],
            "properties": {
              "contract_package_hash": {
                "$ref": "#/components/schemas/ContractPackageHash"
              },
              "contract_wasm_hash": {
                "$ref": "#/components/schemas/ContractWasmHash"
              },
              "named_keys": {
                "$ref": "#/components/schemas/NamedKeys"
              },
              "entry_points": {
                "$ref": "#/components/schemas/Array_of_NamedEntryPoint"
              },
              "protocol_version": {
                "$ref": "#/components/schemas/ProtocolVersion"
              }
            }
          },
          "ContractPackageHash": {
            "description": "The hex-encoded address of the contract package.",
            "type": "string"
          },
          "ContractWasmHash": {
            "description": "The hash address of the contract wasm",
            "type": "string"
          },
          "Array_of_NamedEntryPoint": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedEntryPoint"
            }
          },
          "NamedEntryPoint": {
            "type": "object",
            "required": [
              "entry_point",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "entry_point": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EntryPoint"
                  }
                ]
              }
            }
          },
          "EntryPoint": {
            "description": "Type signature of a method. Order of arguments matter since can be referenced by index as well as name.",
            "type": "object",
            "required": [
              "access",
              "args",
              "entry_point_type",
              "name",
              "ret"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "args": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Parameter"
                }
              },
              "ret": {
                "$ref": "#/components/schemas/CLType"
              },
              "access": {
                "$ref": "#/components/schemas/EntryPointAccess"
              },
              "entry_point_type": {
                "$ref": "#/components/schemas/EntryPointType"
              }
            }
          },
          "Parameter": {
            "description": "Parameter to a method",
            "type": "object",
            "required": [
              "cl_type",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "cl_type": {
                "$ref": "#/components/schemas/CLType"
              }
            }
          },
          "EntryPointAccess": {
            "description": "Enum describing the possible access control options for a contract entry point (method).",
            "oneOf": [
              {
                "description": "Anyone can call this method (no access controls).",
                "type": "string",
                "enum": [
                  "Public"
                ]
              },
              {
                "description": "Only users from the listed groups may call this method. Note: if the list is empty then this method is not callable from outside the contract.",
                "type": "object",
                "required": [
                  "Groups"
                ],
                "properties": {
                  "Groups": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Group"
                    }
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Can't be accessed directly but are kept in the derived wasm bytes.",
                "type": "string",
                "enum": [
                  "Template"
                ]
              }
            ]
          },
          "Group": {
            "description": "A (labelled) \"user group\". Each method of a versioned contract may be associated with one or more user groups which are allowed to call it.",
            "type": "string"
          },
          "EntryPointType": {
            "description": "Context of method execution\n\nMost significant bit represents version i.e. - 0b0 -> 0.x/1.x (session & contracts) - 0b1 -> 2.x and later (introduced installer, utility entry points)",
            "oneOf": [
              {
                "description": "Runs as session code",
                "type": "string",
                "enum": [
                  "Session"
                ]
              },
              {
                "description": "Runs within contract's context",
                "type": "string",
                "enum": [
                  "Contract"
                ]
              },
              {
                "description": "Installer entry point.",
                "type": "string",
                "enum": [
                  "Install"
                ]
              }
            ]
          },
          "ProtocolVersion": {
            "description": "Casper Platform protocol version",
            "type": "string"
          },
          "Package": {
            "description": "Contract definition, metadata, and security container.",
            "type": "object",
            "required": [
              "access_key",
              "contract_package_kind",
              "disabled_versions",
              "groups",
              "lock_status",
              "versions"
            ],
            "properties": {
              "access_key": {
                "description": "Key used to add or disable versions.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/URef"
                  }
                ]
              },
              "versions": {
                "description": "All versions (enabled & disabled).",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Array_of_ContractVersionAndHash"
                  }
                ]
              },
              "disabled_versions": {
                "description": "Collection of disabled contract versions. The runtime will not permit disabled contract versions to be executed.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContractVersionKey"
                },
                "uniqueItems": true
              },
              "groups": {
                "description": "Mapping maintaining the set of URefs associated with each \"user group\". This can be used to control access to methods in a particular version of the contract. A method is callable by any context which \"knows\" any of the URefs associated with the method's user group.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Array_of_NamedUserGroup"
                  }
                ]
              },
              "lock_status": {
                "description": "A flag that determines whether a contract is locked",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContractPackageStatus"
                  }
                ]
              },
              "contract_package_kind": {
                "description": "The kind of package.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContractPackageKind"
                  }
                ]
              }
            }
          },
          "Array_of_ContractVersionAndHash": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractVersionAndHash"
            }
          },
          "ContractVersionAndHash": {
            "type": "object",
            "required": [
              "contract_hash",
              "contract_version_key"
            ],
            "properties": {
              "contract_version_key": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContractVersionKey"
                  }
                ]
              },
              "contract_hash": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContractHash"
                  }
                ]
              }
            }
          },
          "ContractVersionKey": {
            "description": "Major element of `ProtocolVersion` combined with `ContractVersion`.",
            "type": "object",
            "required": [
              "contract_version",
              "protocol_version_major"
            ],
            "properties": {
              "protocol_version_major": {
                "description": "Major element of `ProtocolVersion` a `ContractVersion` is compatible with.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "contract_version": {
                "description": "Automatically incremented value for a contract version within a major `ProtocolVersion`.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            }
          },
          "ContractHash": {
            "description": "The hex-encoded address of the addressable entity.",
            "type": "string"
          },
          "Array_of_NamedUserGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedUserGroup"
            }
          },
          "NamedUserGroup": {
            "type": "object",
            "required": [
              "group_name",
              "group_users"
            ],
            "properties": {
              "group_name": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Group"
                  }
                ]
              },
              "group_users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/URef"
                },
                "uniqueItems": true
              }
            }
          },
          "ContractPackageStatus": {
            "description": "A enum to determine the lock status of the contract package.",
            "oneOf": [
              {
                "description": "The package is locked and cannot be versioned.",
                "type": "string",
                "enum": [
                  "Locked"
                ]
              },
              {
                "description": "The package is unlocked and can be versioned.",
                "type": "string",
                "enum": [
                  "Unlocked"
                ]
              }
            ]
          },
          "ContractPackageKind": {
            "description": "The type of contract package.",
            "oneOf": [
              {
                "description": "Contract Packages associated with Wasm stored on chain.",
                "type": "string",
                "enum": [
                  "Wasm"
                ]
              },
              {
                "description": "Contract Package associated with a native contract implementation.",
                "type": "object",
                "required": [
                  "System"
                ],
                "properties": {
                  "System": {
                    "$ref": "#/components/schemas/SystemContractType"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Contract Package associated with an Account hash.",
                "type": "object",
                "required": [
                  "Account"
                ],
                "properties": {
                  "Account": {
                    "$ref": "#/components/schemas/AccountHash"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Contract Packages from the previous format.",
                "type": "string",
                "enum": [
                  "Legacy"
                ]
              }
            ]
          },
          "SystemContractType": {
            "description": "System contract types.\n\nUsed by converting to a `u32` and passing as the `system_contract_index` argument of `ext_ffi::casper_get_system_contract()`.",
            "oneOf": [
              {
                "description": "Mint contract.",
                "type": "string",
                "enum": [
                  "Mint"
                ]
              },
              {
                "description": "Handle Payment contract.",
                "type": "string",
                "enum": [
                  "HandlePayment"
                ]
              },
              {
                "description": "Standard Payment contract.",
                "type": "string",
                "enum": [
                  "StandardPayment"
                ]
              },
              {
                "description": "Auction contract.",
                "type": "string",
                "enum": [
                  "Auction"
                ]
              }
            ]
          },
          "AddressableEntity": {
            "description": "Methods and type signatures supported by a contract.",
            "type": "object",
            "required": [
              "action_thresholds",
              "associated_keys",
              "contract_package_hash",
              "contract_wasm_hash",
              "entry_points",
              "main_purse",
              "named_keys",
              "protocol_version"
            ],
            "properties": {
              "contract_package_hash": {
                "$ref": "#/components/schemas/ContractPackageHash"
              },
              "contract_wasm_hash": {
                "$ref": "#/components/schemas/ContractWasmHash"
              },
              "named_keys": {
                "$ref": "#/components/schemas/NamedKeys"
              },
              "entry_points": {
                "$ref": "#/components/schemas/Array_of_NamedEntryPoint"
              },
              "protocol_version": {
                "$ref": "#/components/schemas/ProtocolVersion"
              },
              "main_purse": {
                "$ref": "#/components/schemas/URef"
              },
              "associated_keys": {
                "$ref": "#/components/schemas/AssociatedKeys"
              },
              "action_thresholds": {
                "$ref": "#/components/schemas/ActionThresholds"
              }
            }
          },
          "Context": {
            "description": "Context key containing a hash of the owner of the key and a key to be associated with a value.",
            "type": "object",
            "required": [
              "key_hash",
              "owner"
            ],
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/ContractHash"
              },
              "key_hash": {
                "$ref": "#/components/schemas/KeyHash"
              }
            }
          },
          "KeyHash": {
            "description": "Hex-encoded key hash.",
            "type": "string"
          },
          "Lifetime": {
            "description": "Lifetime of a value stored behind a [`crate::URef`].",
            "oneOf": [
              {
                "description": "Indefinite lifetime.",
                "type": "string",
                "enum": [
                  "Indefinite"
                ]
              },
              {
                "description": "Finite lifetime ending at a specific [`EraId`].",
                "type": "object",
                "required": [
                  "Finite"
                ],
                "properties": {
                  "Finite": {
                    "$ref": "#/components/schemas/EraId"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "GlobalStateIdentifier": {
            "description": "Identifier for possible ways to query Global State",
            "oneOf": [
              {
                "description": "Query using a block hash.",
                "type": "object",
                "required": [
                  "BlockHash"
                ],
                "properties": {
                  "BlockHash": {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Query using a block height.",
                "type": "object",
                "required": [
                  "BlockHeight"
                ],
                "properties": {
                  "BlockHeight": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "Query using the state root hash.",
                "type": "object",
                "required": [
                  "StateRootHash"
                ],
                "properties": {
                  "StateRootHash": {
                    "$ref": "#/components/schemas/Digest"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "BlockHeader": {
            "description": "The header portion of a block.",
            "type": "object",
            "required": [
              "accumulated_seed",
              "body_hash",
              "era_id",
              "height",
              "parent_hash",
              "protocol_version",
              "random_bit",
              "state_root_hash",
              "timestamp"
            ],
            "properties": {
              "parent_hash": {
                "description": "The parent block's hash.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                ]
              },
              "state_root_hash": {
                "description": "The root hash of global state after the deploys in this block have been executed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Digest"
                  }
                ]
              },
              "body_hash": {
                "description": "The hash of the block's body.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Digest"
                  }
                ]
              },
              "random_bit": {
                "description": "A random bit needed for initializing a future era.",
                "type": "boolean"
              },
              "accumulated_seed": {
                "description": "A seed needed for initializing a future era.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Digest"
                  }
                ]
              },
              "era_end": {
                "description": "The `EraEnd` of a block if it is a switch block.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/EraEnd"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "timestamp": {
                "description": "The timestamp from when the block was proposed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Timestamp"
                  }
                ]
              },
              "era_id": {
                "description": "The era ID in which this block was created.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EraId"
                  }
                ]
              },
              "height": {
                "description": "The height of this block, i.e. the number of ancestors.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "protocol_version": {
                "description": "The protocol version of the network from when this block was created.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProtocolVersion"
                  }
                ]
              }
            }
          },
          "EraEnd": {
            "description": "Information related to the end of an era, and validator weights for the following era.",
            "type": "object",
            "required": [
              "era_report",
              "next_era_validator_weights"
            ],
            "properties": {
              "era_report": {
                "description": "Equivocation, reward and validator inactivity information.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EraReport_for_PublicKey"
                  }
                ]
              },
              "next_era_validator_weights": {
                "description": "The validators for the upcoming era and their respective weights.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Array_of_ValidatorWeight"
                  }
                ]
              }
            }
          },
          "EraReport_for_PublicKey": {
            "description": "Equivocation, reward and validator inactivity information.",
            "type": "object",
            "required": [
              "equivocators",
              "inactive_validators",
              "rewards"
            ],
            "properties": {
              "equivocators": {
                "description": "The set of equivocators.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PublicKey"
                }
              },
              "rewards": {
                "description": "Rewards for finalization of earlier blocks.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Array_of_EraReward"
                  }
                ]
              },
              "inactive_validators": {
                "description": "Validators that haven't produced any unit during the era.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PublicKey"
                }
              }
            }
          },
          "Array_of_EraReward": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EraReward"
            }
          },
          "EraReward": {
            "description": "A validator's public key paired with a measure of the value of its contribution to consensus, as a fraction of the configured maximum block reward.",
            "type": "object",
            "required": [
              "amount",
              "validator"
            ],
            "properties": {
              "validator": {
                "description": "The validator's public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "amount": {
                "description": "The reward amount.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          "Array_of_ValidatorWeight": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorWeight"
            }
          },
          "ValidatorWeight": {
            "description": "A validator's public key paired with its weight, i.e. the total number of motes staked by it and its delegators.",
            "type": "object",
            "required": [
              "validator",
              "weight"
            ],
            "properties": {
              "validator": {
                "description": "The validator's public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "weight": {
                "description": "The validator's weight.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/U512"
                  }
                ]
              }
            }
          },
          "PurseIdentifier": {
            "description": "Identifier of a purse.",
            "oneOf": [
              {
                "description": "The main purse of the account identified by this public key.",
                "type": "object",
                "required": [
                  "main_purse_under_public_key"
                ],
                "properties": {
                  "main_purse_under_public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "The main purse of the account identified by this account hash.",
                "type": "object",
                "required": [
                  "main_purse_under_account_hash"
                ],
                "properties": {
                  "main_purse_under_account_hash": {
                    "$ref": "#/components/schemas/AccountHash"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "The purse identified by this URef.",
                "type": "object",
                "required": [
                  "purse_uref"
                ],
                "properties": {
                  "purse_uref": {
                    "$ref": "#/components/schemas/URef"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "PeersMap": {
            "description": "Map of peer IDs to network addresses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeerEntry"
            }
          },
          "PeerEntry": {
            "description": "Node peer entry.",
            "type": "object",
            "required": [
              "address",
              "node_id"
            ],
            "properties": {
              "node_id": {
                "description": "Node id.",
                "type": "string"
              },
              "address": {
                "description": "Node address.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "MinimalBlockInfo": {
            "description": "Minimal info of a `Block`.",
            "type": "object",
            "required": [
              "creator",
              "era_id",
              "hash",
              "height",
              "state_root_hash",
              "timestamp"
            ],
            "properties": {
              "hash": {
                "$ref": "#/components/schemas/BlockHash"
              },
              "timestamp": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "era_id": {
                "$ref": "#/components/schemas/EraId"
              },
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "state_root_hash": {
                "$ref": "#/components/schemas/Digest"
              },
              "creator": {
                "$ref": "#/components/schemas/PublicKey"
              }
            },
            "additionalProperties": false
          },
          "NextUpgrade": {
            "description": "Information about the next protocol upgrade.",
            "type": "object",
            "required": [
              "activation_point",
              "protocol_version"
            ],
            "properties": {
              "activation_point": {
                "$ref": "#/components/schemas/ActivationPoint"
              },
              "protocol_version": {
                "type": "string"
              }
            }
          },
          "ActivationPoint": {
            "description": "The first era to which the associated protocol version applies.",
            "anyOf": [
              {
                "description": "Era id.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EraId"
                  }
                ]
              },
              {
                "description": "Genesis timestamp.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Timestamp"
                  }
                ]
              }
            ]
          },
          "ReactorState": {
            "description": "The state of the reactor.",
            "oneOf": [
              {
                "description": "Get all components and reactor state set up on start.",
                "type": "string",
                "enum": [
                  "Initialize"
                ]
              },
              {
                "description": "Orient to the network and attempt to catch up to tip.",
                "type": "string",
                "enum": [
                  "CatchUp"
                ]
              },
              {
                "description": "Running commit upgrade and creating immediate switch block.",
                "type": "string",
                "enum": [
                  "Upgrading"
                ]
              },
              {
                "description": "Stay caught up with tip.",
                "type": "string",
                "enum": [
                  "KeepUp"
                ]
              },
              {
                "description": "Node is currently caught up and is an active validator.",
                "type": "string",
                "enum": [
                  "Validate"
                ]
              },
              {
                "description": "Node should be shut down for upgrade.",
                "type": "string",
                "enum": [
                  "ShutdownForUpgrade"
                ]
              }
            ]
          },
          "AvailableBlockRange": {
            "description": "An unbroken, inclusive range of blocks.",
            "type": "object",
            "required": [
              "high",
              "low"
            ],
            "properties": {
              "low": {
                "description": "The inclusive lower bound of the range.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "high": {
                "description": "The inclusive upper bound of the range.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          "BlockSynchronizerStatus": {
            "description": "The status of the block synchronizer.",
            "type": "object",
            "properties": {
              "historical": {
                "description": "The status of syncing a historical block, if any.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BlockSyncStatus"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "forward": {
                "description": "The status of syncing a forward block, if any.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BlockSyncStatus"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "BlockSyncStatus": {
            "description": "The status of syncing an individual block.",
            "type": "object",
            "required": [
              "acquisition_state",
              "block_hash"
            ],
            "properties": {
              "block_hash": {
                "description": "The block hash.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                ]
              },
              "block_height": {
                "description": "The height of the block, if known.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "acquisition_state": {
                "description": "The state of acquisition of the data associated with the block.",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "JsonValidatorChanges": {
            "description": "The changes in a validator's status.",
            "type": "object",
            "required": [
              "public_key",
              "status_changes"
            ],
            "properties": {
              "public_key": {
                "description": "The public key of the validator.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "status_changes": {
                "description": "The set of changes to the validator's status.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonValidatorStatusChange"
                }
              }
            },
            "additionalProperties": false
          },
          "JsonValidatorStatusChange": {
            "description": "A single change to a validator's status in the given era.",
            "type": "object",
            "required": [
              "era_id",
              "validator_change"
            ],
            "properties": {
              "era_id": {
                "description": "The era in which the change occurred.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EraId"
                  }
                ]
              },
              "validator_change": {
                "description": "The change in validator status.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ValidatorChange"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "ValidatorChange": {
            "description": "A change to a validator's status between two eras.",
            "oneOf": [
              {
                "description": "The validator got newly added to the validator set.",
                "type": "string",
                "enum": [
                  "Added"
                ]
              },
              {
                "description": "The validator was removed from the validator set.",
                "type": "string",
                "enum": [
                  "Removed"
                ]
              },
              {
                "description": "The validator was banned from this era.",
                "type": "string",
                "enum": [
                  "Banned"
                ]
              },
              {
                "description": "The validator was excluded from proposing new blocks in this era.",
                "type": "string",
                "enum": [
                  "CannotPropose"
                ]
              },
              {
                "description": "We saw the validator misbehave in this era.",
                "type": "string",
                "enum": [
                  "SeenAsFaulty"
                ]
              }
            ]
          },
          "ChainspecRawBytes": {
            "description": "The raw bytes of the chainspec.toml, genesis accounts.toml, and global_state.toml files.",
            "type": "object",
            "required": [
              "chainspec_bytes"
            ],
            "properties": {
              "chainspec_bytes": {
                "description": "Raw bytes of the current chainspec.toml file.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Bytes"
                  }
                ]
              },
              "maybe_genesis_accounts_bytes": {
                "description": "Raw bytes of the current genesis accounts.toml file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Bytes"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "maybe_global_state_bytes": {
                "description": "Raw bytes of the current global_state.toml file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Bytes"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          "JsonBlockWithSignatures": {
            "description": "A JSON-friendly representation of a block and the signatures for that block.",
            "type": "object",
            "required": [
              "block",
              "proofs"
            ],
            "properties": {
              "block": {
                "description": "The block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Block"
                  }
                ]
              },
              "proofs": {
                "description": "The proofs of the block, i.e. a collection of validators' signatures of the block hash.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Array_of_BlockProof"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "Block": {
            "description": "A block after execution.",
            "oneOf": [
              {
                "description": "The legacy, initial version of the block.",
                "type": "object",
                "required": [
                  "Version1"
                ],
                "properties": {
                  "Version1": {
                    "$ref": "#/components/schemas/BlockV1"
                  }
                },
                "additionalProperties": false
              },
              {
                "description": "The version 2 of the block.",
                "type": "object",
                "required": [
                  "Version2"
                ],
                "properties": {
                  "Version2": {
                    "$ref": "#/components/schemas/BlockV2"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "BlockV1": {
            "description": "A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 1.",
            "type": "object",
            "required": [
              "body",
              "hash",
              "header"
            ],
            "properties": {
              "hash": {
                "description": "The block hash identifying this block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                ]
              },
              "header": {
                "description": "The header portion of the block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockHeader"
                  }
                ]
              },
              "body": {
                "description": "The body portion of the block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockBodyV1"
                  }
                ]
              }
            }
          },
          "BlockBodyV1": {
            "description": "The body portion of a block. Version 1.",
            "type": "object",
            "required": [
              "deploy_hashes",
              "proposer",
              "transfer_hashes"
            ],
            "properties": {
              "proposer": {
                "description": "The public key of the validator which proposed the block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "deploy_hashes": {
                "description": "The deploy hashes of the non-transfer deploys within the block.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeployHash"
                }
              },
              "transfer_hashes": {
                "description": "The deploy hashes of the transfers within the block.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeployHash"
                }
              }
            }
          },
          "BlockV2": {
            "description": "A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain. Version 2.",
            "type": "object",
            "required": [
              "body",
              "hash",
              "header"
            ],
            "properties": {
              "hash": {
                "description": "The block hash identifying this block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                ]
              },
              "header": {
                "description": "The header portion of the block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockHeader"
                  }
                ]
              },
              "body": {
                "description": "The body portion of the block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockBodyV2"
                  }
                ]
              }
            }
          },
          "BlockBodyV2": {
            "description": "The body portion of a block. Version 2.",
            "type": "object",
            "required": [
              "deploy_hashes",
              "proposer",
              "transfer_hashes"
            ],
            "properties": {
              "proposer": {
                "description": "The public key of the validator which proposed the block.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "deploy_hashes": {
                "description": "The deploy hashes of the non-transfer deploys within the block.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeployHash"
                }
              },
              "transfer_hashes": {
                "description": "The deploy hashes of the transfers within the block.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeployHash"
                }
              }
            }
          },
          "Array_of_BlockProof": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockProof"
            }
          },
          "BlockProof": {
            "description": "A validator's public key paired with a corresponding signature of a given block hash.",
            "type": "object",
            "required": [
              "public_key",
              "signature"
            ],
            "properties": {
              "public_key": {
                "description": "The validator's public key.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "signature": {
                "description": "The validator's signature.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Signature"
                  }
                ]
              }
            }
          },
          "EraSummary": {
            "description": "The summary of an era",
            "type": "object",
            "required": [
              "block_hash",
              "era_id",
              "merkle_proof",
              "state_root_hash",
              "stored_value"
            ],
            "properties": {
              "block_hash": {
                "description": "The block hash",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BlockHash"
                  }
                ]
              },
              "era_id": {
                "description": "The era id",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EraId"
                  }
                ]
              },
              "stored_value": {
                "description": "The StoredValue containing era information",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StoredValue"
                  }
                ]
              },
              "state_root_hash": {
                "description": "Hex-encoded hash of the state root",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Digest"
                  }
                ]
              },
              "merkle_proof": {
                "description": "The Merkle proof",
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "AuctionState": {
            "description": "Data structure summarizing auction contract data.",
            "type": "object",
            "required": [
              "bids",
              "block_height",
              "era_validators",
              "state_root_hash"
            ],
            "properties": {
              "state_root_hash": {
                "description": "Global state hash.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Digest"
                  }
                ]
              },
              "block_height": {
                "description": "Block height.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "era_validators": {
                "description": "Era validators.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonEraValidators"
                }
              },
              "bids": {
                "description": "All bids.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Array_of_PublicKeyAndBid"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "JsonEraValidators": {
            "description": "The validators for the given era.",
            "type": "object",
            "required": [
              "era_id",
              "validator_weights"
            ],
            "properties": {
              "era_id": {
                "$ref": "#/components/schemas/EraId"
              },
              "validator_weights": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JsonValidatorWeights"
                }
              }
            },
            "additionalProperties": false
          },
          "JsonValidatorWeights": {
            "description": "A validator's weight.",
            "type": "object",
            "required": [
              "public_key",
              "weight"
            ],
            "properties": {
              "public_key": {
                "$ref": "#/components/schemas/PublicKey"
              },
              "weight": {
                "$ref": "#/components/schemas/U512"
              }
            },
            "additionalProperties": false
          },
          "Array_of_PublicKeyAndBid": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKeyAndBid"
            }
          },
          "PublicKeyAndBid": {
            "description": "A bid associated with the given public key.",
            "type": "object",
            "required": [
              "bid",
              "public_key"
            ],
            "properties": {
              "public_key": {
                "description": "The public key of the bidder.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                ]
              },
              "bid": {
                "description": "The bid details.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Bid"
                  }
                ]
              }
            }
          }
        }
      }
    }
  ],
  "type": "object",
  "properties": {
    "openrpc": {
      "type": "string"
    },
    "info": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "contact": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "license": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      }
    },
    "servers": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      }
    },
    "methods": {
      "type": "array",
      "items": true
    },
    "components": {
      "type": "object",
      "properties": {
        "schemas": {
          "type": "object",
          "additionalProperties": true
        }
      }
    }
  }
}
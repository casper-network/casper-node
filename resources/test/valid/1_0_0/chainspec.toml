[protocol]
version = '1.0.0'
hard_reset = false
activation_point = 1

[network]
name = 'test-chain'
maximum_net_message_size = 23_068_672

[core]
era_duration = '3minutes'
minimum_era_height = 9
minimum_block_time = '16seconds'
validator_slots = 5
finality_threshold_fraction = [2, 25]
auction_delay = 3
locked_funds_period = '90days'
vesting_schedule_period = '13 weeks'
round_seigniorage_rate = [6_414, 623_437_335_209]
unbonding_delay = 14
max_associated_keys = 100
max_runtime_call_stack_height = 12
minimum_delegation_amount = 500_000_000_000
prune_batch_size = 1
strict_argument_checking = false
simultaneous_peer_requests = 5
consensus_protocol = 'Highway'
refund_handling = { type = 'refund', refund_ratio = [0, 1] }
fee_handling = { type = 'pay_to_proposer' }
allow_unrestricted_transfers = true
allow_auction_bids = true
compute_rewards = true
administrators = []

[highway]
maximum_round_length = '525seconds'

[transactions]
max_ttl = '18hours'
max_transaction_size = 1_048_576
block_max_deploy_count = 50
block_max_native_count = 1250
block_max_approval_count = 2600
max_block_size = 10_485_760
block_gas_limit = 10_000_000_000_000
runtime = "VmCasperV1"
native_transfer_minimum_motes = 2_500_000_000
max_timestamp_leeway = '5 seconds'

[transactions.v1]
max_args_length = 1024

[transactions.deploy]
max_payment_cost = '9'
max_dependencies = 11
payment_args_max_length = 1024
session_args_max_length = 1024

[wasm]
max_memory = 17
max_stack_height = 19

[wasm.opcode_costs]
bit = 13
add = 14
mul = 15
div = 16
load = 17
store = 18
const = 19
local = 20
global = 21
integer_comparison = 23
conversion = 24
unreachable = 25
nop = 26
current_memory = 27
grow_memory = 28
regular = 29

# Control flow operations multiplier.
[wasm.opcode_costs.control_flow]
block = 440
loop = 440
if = 440
else = 440
end = 440
br = 440_000
br_if = 440_000
return = 440
select = 440
call = 440
call_indirect = 440
drop = 440

[wasm.opcode_costs.control_flow.br_table]
# Fixed cost per `br_table` opcode
cost = 440_000
# Size of target labels in the `br_table` opcode will be multiplied by `size_multiplier`
size_multiplier = 100

[wasm.storage_costs]
gas_per_byte = 101

[wasm.host_function_costs]
add = { cost = 100, arguments = [0, 1, 2, 3] }
add_associated_key = { cost = 101, arguments = [0, 1, 2] }
add_contract_version = { cost = 102, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] }
blake2b = { cost = 133, arguments = [0, 1, 2, 3] }
call_contract = { cost = 104, arguments = [0, 1, 2, 3, 4, 5, 6] }
call_versioned_contract = { cost = 105, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8] }
create_contract_package_at_hash = { cost = 106, arguments = [0, 1] }
create_contract_user_group = { cost = 107, arguments = [0, 1, 2, 3, 4, 5, 6, 7] }
create_purse = { cost = 108, arguments = [0, 1] }
disable_contract_version = { cost = 109, arguments = [0, 1, 2, 3] }
get_balance = { cost = 110, arguments = [0, 1, 2] }
get_blocktime = { cost = 111, arguments = [0] }
get_caller = { cost = 112, arguments = [0] }
get_key = { cost = 113, arguments = [0, 1, 2, 3, 4] }
get_main_purse = { cost = 114, arguments = [0] }
get_named_arg = { cost = 115, arguments = [0, 1, 2, 3] }
get_named_arg_size = { cost = 116, arguments = [0, 1, 2] }
get_phase = { cost = 117, arguments = [0] }
get_system_contract = { cost = 118, arguments = [0, 1, 2] }
has_key = { cost = 119, arguments = [0, 1] }
is_valid_uref = { cost = 120, arguments = [0, 1] }
load_named_keys = { cost = 121, arguments = [0, 1] }
new_uref = { cost = 122, arguments = [0, 1, 2] }
print = { cost = 123, arguments = [0, 1] }
provision_contract_user_group_uref = { cost = 124, arguments = [0,1,2,3,4] }
put_key = { cost = 125, arguments = [0, 1, 2, 3] }
random_bytes = { cost = 123, arguments = [0, 1] }
read_host_buffer = { cost = 126, arguments = [0, 1, 2] }
read_value = { cost = 127, arguments = [0, 1, 0] }
dictionary_get = { cost = 128,  arguments = [0, 1, 0] }
remove_associated_key = { cost = 129, arguments = [0, 1] }
remove_contract_user_group = { cost = 130, arguments = [0, 1, 2, 3] }
remove_contract_user_group_urefs = { cost = 131, arguments = [0,1,2,3,4,5] }
remove_key = { cost = 132, arguments = [0, 1] }
ret = { cost = 133, arguments = [0, 1] }
revert = { cost = 134, arguments = [0] }
set_action_threshold = { cost = 135, arguments = [0, 1] }
transfer_from_purse_to_account = { cost = 136, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8] }
transfer_from_purse_to_purse = { cost = 137, arguments = [0, 1, 2, 3, 4, 5, 6, 7] }
transfer_to_account = { cost = 138, arguments = [0, 1, 2, 3, 4, 5, 6] }
update_associated_key = { cost = 139, arguments = [0, 1, 2] }
write = { cost = 140,  arguments = [0, 1, 0, 2] }
dictionary_put = { cost = 141, arguments = [0, 1, 2, 3] }
enable_contract_version = { cost = 142, arguments = [0, 1, 2, 3] }

[system_costs]
wasmless_transfer_cost = 100_000_000

[system_costs.auction_costs]
get_era_validators = 10_000
read_seigniorage_recipients = 10_000
add_bid = 10_000
withdraw_bid = 10_000
delegate = 10_000
undelegate = 10_000
run_auction = 10_000
slash = 10_000
distribute = 10_000
withdraw_delegator_reward = 10_000
withdraw_validator_reward = 10_000
read_era_id = 10_000
activate_bid = 10_000
redelegate = 10_000
change_bid_public_key = 10_000
add_reservations = 2_500_000_000
cancel_reservations = 2_500_000_000

[system_costs.mint_costs]
mint = 2_500_000_000
reduce_total_supply = 10_000
create = 2_500_000_000
balance = 10_000
transfer = 10_000
read_base_round_reward = 10_000
mint_into_existing_purse = 2_500_000_000

[system_costs.handle_payment_costs]
get_payment_purse = 10_000
set_refund_purse = 10_000
get_refund_purse = 10_000
finalize_payment = 10_000

[system_costs.standard_payment_costs]
pay = 10_000
